{"version":3,"sources":["node_modules/grunt-browserify/node_modules/browserify/node_modules/browser-pack/_prelude.js","/Users/shanephelan/Documents/Workspace/ITVDashjs/src/core/events/EventsBase.js","/Users/shanephelan/Documents/Workspace/ITVDashjs/src/streaming/protection/CommonEncryption.js","/Users/shanephelan/Documents/Workspace/ITVDashjs/src/streaming/protection/Protection.js","/Users/shanephelan/Documents/Workspace/ITVDashjs/src/streaming/protection/ProtectionEvents.js","/Users/shanephelan/Documents/Workspace/ITVDashjs/src/streaming/protection/controllers/ProtectionController.js","/Users/shanephelan/Documents/Workspace/ITVDashjs/src/streaming/protection/controllers/ProtectionKeyController.js","/Users/shanephelan/Documents/Workspace/ITVDashjs/src/streaming/protection/drm/KeySystemClearKey.js","/Users/shanephelan/Documents/Workspace/ITVDashjs/src/streaming/protection/drm/KeySystemPlayReady.js","/Users/shanephelan/Documents/Workspace/ITVDashjs/src/streaming/protection/drm/KeySystemWidevine.js","/Users/shanephelan/Documents/Workspace/ITVDashjs/src/streaming/protection/models/ProtectionModel_01b.js","/Users/shanephelan/Documents/Workspace/ITVDashjs/src/streaming/protection/models/ProtectionModel_21Jan2015.js","/Users/shanephelan/Documents/Workspace/ITVDashjs/src/streaming/protection/models/ProtectionModel_3Feb2014.js","/Users/shanephelan/Documents/Workspace/ITVDashjs/src/streaming/protection/servers/ClearKey.js","/Users/shanephelan/Documents/Workspace/ITVDashjs/src/streaming/protection/servers/DRMToday.js","/Users/shanephelan/Documents/Workspace/ITVDashjs/src/streaming/protection/servers/PlayReady.js","/Users/shanephelan/Documents/Workspace/ITVDashjs/src/streaming/protection/servers/Widevine.js","/Users/shanephelan/Documents/Workspace/ITVDashjs/src/streaming/protection/vo/ClearKeyKeySet.js","/Users/shanephelan/Documents/Workspace/ITVDashjs/src/streaming/protection/vo/KeyError.js","/Users/shanephelan/Documents/Workspace/ITVDashjs/src/streaming/protection/vo/KeyMessage.js","/Users/shanephelan/Documents/Workspace/ITVDashjs/src/streaming/protection/vo/KeyPair.js","/Users/shanephelan/Documents/Workspace/ITVDashjs/src/streaming/protection/vo/KeySystemAccess.js","/Users/shanephelan/Documents/Workspace/ITVDashjs/src/streaming/protection/vo/KeySystemConfiguration.js","/Users/shanephelan/Documents/Workspace/ITVDashjs/src/streaming/protection/vo/MediaCapability.js","/Users/shanephelan/Documents/Workspace/ITVDashjs/src/streaming/protection/vo/NeedKey.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","dashjs","Protection","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","_dereq_","EventsBase","events","config","override","publicOnly","evt","hasOwnProperty","indexOf","CommonEncryption","cpArray","retVal","cp","schemeIdUri","toLowerCase","value","pssh","offset","view","DataView","version","getUint8","getUint32","slice","keySystem","initData","psshList","parsePSSHList","uuid","cpData","BASE64","decodeArray","__text","buffer","data","dv","done","byteCursor","size","undefined","nextBox","systemID","psshDataSize","boxStart","byteLength","val","toString","createProtectionSystem","controller","protectionKeyController","_controllersProtectionKeyController2","context","getInstance","setConfig","log","initialize","protectionModel","getProtectionModel","_controllersProtectionController2","create","adapter","eventBus","Constants","capabilities","setEncryptedMediaSupported","errHandler","videoElement","videoModel","getElement","onencrypted","mediaKeys","navigator","requestMediaKeySystemAccess","_modelsProtectionModel_21Jan20152","getAPI","APIS_ProtectionModel_3Feb2014","_modelsProtectionModel_3Feb20142","api","APIS_ProtectionModel_01b","_modelsProtectionModel_01b2","apis","Object","keys","instance","generateKeyRequest","addKey","cancelKeyRequest","needkey","keyerror","keyadded","keymessage","setMediaKeys","MediaKeys","release","error","message","ready","close","__dashjs_factory_name","factory","FactoryMaker","getClassFactory","_ProtectionEvents2","updateClassFactory","ProtectionEvents","_EventsBase","_get","getPrototypeOf","prototype","INTERNAL_KEY_MESSAGE","INTERNAL_KEY_SYSTEM_SELECTED","KEY_ADDED","KEY_ERROR","KEY_MESSAGE","KEY_SESSION_CLOSED","KEY_SESSION_CREATED","KEY_SESSION_REMOVED","KEY_STATUSES_CHANGED","KEY_SYSTEM_ACCESS_COMPLETE","KEY_SYSTEM_SELECTED","LICENSE_REQUEST_COMPLETE","NEED_KEY","PROTECTION_CREATED","PROTECTION_DESTROYED","SERVER_CERTIFICATE_UPDATED","TEARDOWN_COMPLETE","VIDEO_ELEMENT_SELECTED","protectionEvents","ProtectionController","setup","pendingNeedKeyData","initialized","sessionType","robustnessLevel","manifest","aInfo","vInfo","streamInfo","getStreamsInfo","audioInfo","getMediaInfoForType","AUDIO","videoInfo","VIDEO","mediaInfo","supportedKS","getSupportedKeySystemsFromContentProtection","contentProtection","selectKeySystem","cps","createKeySession","initDataForKS","_CommonEncryption2","getPSSHForKeySystem","currentInitData","getAllInitData","initDataEquals","trigger","systemString","loadKeySession","sessionID","removeKeySession","sessionToken","closeKeySession","setServerCertificate","serverCertificate","setMediaElement","element","on","onNeedKey","onKeyMessage","off","setSessionType","setRobustnessLevel","level","setProtectionData","protDataSet","reset","getProtData","protData","keySystemString","getKeySystemConfiguration","audioCapabilities","videoCapabilities","audioRobustness","videoRobustness","push","_voMediaCapability2","codec","_voKeySystemConfiguration2","fromManifest","requestedKeySystems","ksIdx","ks","configs","onKeySystemAccessComplete","event","requestKeySystemAccess","onKeySystemSelected","keySystemAccess","getKeySystem","sendLicenseRequestCompleteEvent","keyMessage","messageType","licenseServerData","getLicenseServer","eventData","getSessionID","isClearKey","clearkeys","processClearKeyLicenseRequest","updateKeySession","xhr","XMLHttpRequest","url","serverURL","laURL","getLicenseServerURLFromInitData","getPSSHData","getServerURLFromMessage","reportError","errorMsg","response","getErrorResponse","statusText","status","readyState","open","getHTTPMethod","responseType","getResponseType","onload","licenseMessage","getLicenseMessage","onabort","onerror","updateHeaders","headers","key","withCredentials","setRequestHeader","httpRequestHeaders","getRequestHeadersFromMessage","send","getLicenseRequestFromMessage","initDataType","abInitData","ArrayBuffer","isView","String","fromCharCode","apply","Uint8Array","getSupportedKeySystems","getKeySystems","ProtectionKeyController","keySystems","_drmKeySystemPlayReady2","_drmKeySystemWidevine2","_drmKeySystemClearKey2","clearkeyKeySystem","getKeySystemBySystemString","initData1","initData2","data1","data2","j","cpIdx","schemeIdURI","getInitData","shouldNotFilterOutKeySystem","_serversDRMToday2","_serversWidevine2","_serversPlayReady2","_serversClearKey2","getClearKeysFromProtectionData","protectionDataSet","getProtectionData","init","getSingletonFactory","KeySystemClearKey","protectionData","clearkeySet","jsonMsg","JSON","parse","keyPairs","kids","clearkeyID","clearkey","_voKeyPair2","_voClearKeyKeySet2","parseInitDataFromContentProtection","KeySystemPlayReady","msg","xmlDoc","parser","DOMParser","dataview","messageFormat","Uint16Array","parseFromString","headerNameList","getElementsByTagName","headerValueList","childNodes","nodeValue","Content","licenseRequest","Challenge","decode","numRecords","getUint16","recordType","recordLength","recordData","record","laurl","luiurl","PSSHBoxType","playreadySystemID","uint8arraydecodedPROHeader","PROSize","PSSHSize","PSSHBoxBuffer","PSSHBox","PSSHData","pro","prheader","setUint32","set","setPlayReadyMessageFormat","format","KeySystemWidevine","replaceKID","KID","pssh_array","replace","kidLen","pos","ProtectionModel_01b","pendingSessions","sessions","eventHandler","createEventHandler","removeEventListeners","ksConfigurations","ve","document","createElement","found","supportedAudio","supportedVideo","configIdx","videos","videoIdx","canPlayType","contentType","ksConfig","_voKeySystemAccess2","mediaElement","addEventListener","moreSessionsAllowed","newSession","getExpirationTime","NaN","getSessionType","keyID","handleEvent","type","_voNeedKey2","findSessionByID","sessionId","errorCode","systemCode","_voKeyError2","shift","mediaKeyMessageError","_voKeyMessage2","defaultURL","sessionArray","len","removeEventListener","ProtectionModel_21Jan2015","numSessions","session","removeSession","then","closed","closeKeySessionInternal","requestKeySystemAccessInternal","mksa","createMediaKeys","mkeys","name","createSession","createSessionToken","generateRequest","toJWK","update","load","success","remove","idx","mediaKeySystemAccess","configuration","getConfiguration","token","splice","expiration","getKeyStatuses","keyStatuses","ProtectionModel_3Feb2014","audios","audioIdx","isTypeSupported","ksAccess","ksConfiguration","boundDoSetKeys","doSetKeys","bind","keySession","errorStr","destinationURL","ClearKey","serverResponse","keypair","keyid","kid","k","DRMToday","checkConfig","keySystemStr","com.widevine.alpha","license","com.microsoft.playready","PlayReady","uintToString","arrayBuffer","encodedString","decodedString","decodeURIComponent","escape","parseServerResponse","stringResponse","envelope","getElementsByTagNameNS","soap","body","fault","parseErrorResponse","faultstring","statusCode","idStart","idEnd","detail","exception","node","firstChild","lastIndexOf","substring","errorString","Widevine","ClearKeyKeySet","numKeys","jwk","kty","alg","jwkString","stringify","buf","bView","charCodeAt","KeyError","KeyMessage","KeyPair","KeySystemAccess","KeySystemConfiguration","distinctiveIdentifier","persistentState","sessionTypes","initDataTypes","MediaCapability","robustness","NeedKey"],"mappings":"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","file":"dash.protection.min.js","sourceRoot":"./src/","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @class\n * @ignore\n */\nclass EventsBase {\n    extend (events, config) {\n        if (!events) return;\n\n        let override = config ? config.override : false;\n        let publicOnly = config ? config.publicOnly : false;\n\n\n        for (const evt in events) {\n            if (!events.hasOwnProperty(evt) || (this[evt] && !override)) continue;\n            if (publicOnly && events[evt].indexOf('public_') === -1) continue;\n            this[evt] = events[evt];\n\n        }\n    }\n}\n\nexport default EventsBase;","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nclass CommonEncryption {\n    /**\n     * Find and return the ContentProtection element in the given array\n     * that indicates support for MPEG Common Encryption\n     *\n     * @param {Array} cpArray array of content protection elements\n     * @returns {Object|null} the Common Encryption content protection element or\n     * null if one was not found\n     */\n    static findCencContentProtection(cpArray) {\n        let retVal = null;\n        for (let i = 0; i < cpArray.length; ++i) {\n            let cp = cpArray[i];\n            if (cp.schemeIdUri.toLowerCase() === 'urn:mpeg:dash:mp4protection:2011' &&\n                    cp.value.toLowerCase() === 'cenc')\n                retVal = cp;\n        }\n        return retVal;\n    }\n\n    /**\n     * Returns just the data portion of a single PSSH\n     *\n     * @param {ArrayBuffer} pssh - the PSSH\n     * @return {ArrayBuffer} data portion of the PSSH\n     */\n    static getPSSHData(pssh) {\n        let offset = 8; // Box size and type fields\n        let view = new DataView(pssh);\n\n        // Read version\n        let version = view.getUint8(offset);\n\n        offset += 20; // Version (1), flags (3), system ID (16)\n\n        if (version > 0) {\n            offset += 4 + (16 * view.getUint32(offset)); // Key ID count (4) and All key IDs (16*count)\n        }\n\n        offset += 4; // Data size\n        return pssh.slice(offset);\n    }\n\n    /**\n     * Returns the PSSH associated with the given key system from the concatenated\n     * list of PSSH boxes in the given initData\n     *\n     * @param {KeySystem} keySystem the desired\n     * key system\n     * @param {ArrayBuffer} initData 'cenc' initialization data.  Concatenated list of PSSH.\n     * @returns {ArrayBuffer|null} The PSSH box data corresponding to the given key system, null if not found\n     * or null if a valid association could not be found.\n     */\n    static getPSSHForKeySystem(keySystem, initData) {\n        let psshList = CommonEncryption.parsePSSHList(initData);\n        if (psshList.hasOwnProperty(keySystem.uuid.toLowerCase())) {\n            return psshList[keySystem.uuid.toLowerCase()];\n        }\n        return null;\n    }\n\n    /**\n     * Parse a standard common encryption PSSH which contains a simple\n     * base64-encoding of the init data\n     *\n     * @param {Object} cpData the ContentProtection element\n     * @param {BASE64} BASE64 reference\n     * @returns {ArrayBuffer|null} the init data or null if not found\n     */\n    static parseInitDataFromContentProtection(cpData, BASE64) {\n        if ('pssh' in cpData) {\n            return BASE64.decodeArray(cpData.pssh.__text).buffer;\n        }\n        return null;\n    }\n\n    /**\n     * Parses list of PSSH boxes into keysystem-specific PSSH data\n     *\n     * @param {ArrayBuffer} data - the concatenated list of PSSH boxes as provided by\n     * CDM as initialization data when CommonEncryption content is detected\n     * @returns {Object|Array} an object that has a property named according to each of\n     * the detected key system UUIDs (e.g. 00000000-0000-0000-0000-0000000000)\n     * and a ArrayBuffer (the entire PSSH box) as the property value\n     */\n    static parsePSSHList(data) {\n\n        if (data === null)\n            return [];\n\n        let dv = new DataView(data);\n        let done = false;\n        let pssh = {};\n\n        // TODO: Need to check every data read for end of buffer\n        let byteCursor = 0;\n        while (!done) {\n\n            let size,\n                nextBox,\n                version,\n                systemID,\n                psshDataSize;\n            let boxStart = byteCursor;\n\n            if (byteCursor >= dv.buffer.byteLength)\n                break;\n\n            /* Box size */\n            size = dv.getUint32(byteCursor);\n            nextBox = byteCursor + size;\n            byteCursor += 4;\n\n            /* Verify PSSH */\n            if (dv.getUint32(byteCursor) !== 0x70737368) {\n                byteCursor = nextBox;\n                continue;\n            }\n            byteCursor += 4;\n\n            /* Version must be 0 or 1 */\n            version = dv.getUint8(byteCursor);\n            if (version !== 0 && version !== 1) {\n                byteCursor = nextBox;\n                continue;\n            }\n            byteCursor++;\n\n            byteCursor += 3; /* skip flags */\n\n            // 16-byte UUID/SystemID\n            systemID = '';\n            let i, val;\n            for (i = 0; i < 4; i++) {\n                val = dv.getUint8(byteCursor + i).toString(16);\n                systemID += (val.length === 1) ? '0' + val : val;\n            }\n            byteCursor += 4;\n            systemID += '-';\n            for (i = 0; i < 2; i++) {\n                val = dv.getUint8(byteCursor + i).toString(16);\n                systemID += (val.length === 1) ? '0' + val : val;\n            }\n            byteCursor += 2;\n            systemID += '-';\n            for (i = 0; i < 2; i++) {\n                val = dv.getUint8(byteCursor + i).toString(16);\n                systemID += (val.length === 1) ? '0' + val : val;\n            }\n            byteCursor += 2;\n            systemID += '-';\n            for (i = 0; i < 2; i++) {\n                val = dv.getUint8(byteCursor + i).toString(16);\n                systemID += (val.length === 1) ? '0' + val : val;\n            }\n            byteCursor += 2;\n            systemID += '-';\n            for (i = 0; i < 6; i++) {\n                val = dv.getUint8(byteCursor + i).toString(16);\n                systemID += (val.length === 1) ? '0' + val : val;\n            }\n            byteCursor += 6;\n\n            systemID = systemID.toLowerCase();\n\n            /* PSSH Data Size */\n            psshDataSize = dv.getUint32(byteCursor);\n            byteCursor += 4;\n\n            /* PSSH Data */\n            pssh[systemID] = dv.buffer.slice(boxStart, nextBox);\n            byteCursor = nextBox;\n        }\n\n        return pssh;\n    }\n}\n\nexport default CommonEncryption;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport ProtectionController from './controllers/ProtectionController';\nimport ProtectionKeyController from './controllers/ProtectionKeyController';\nimport ProtectionEvents from './ProtectionEvents';\nimport ProtectionModel_21Jan2015 from './models/ProtectionModel_21Jan2015';\nimport ProtectionModel_3Feb2014 from './models/ProtectionModel_3Feb2014';\nimport ProtectionModel_01b from './models/ProtectionModel_01b';\n\nconst APIS_ProtectionModel_01b = [\n    // Un-prefixed as per spec\n    {\n        // Video Element\n        generateKeyRequest: 'generateKeyRequest',\n        addKey: 'addKey',\n        cancelKeyRequest: 'cancelKeyRequest',\n\n        // Events\n        needkey: 'needkey',\n        keyerror: 'keyerror',\n        keyadded: 'keyadded',\n        keymessage: 'keymessage'\n    },\n    // Webkit-prefixed (early Chrome versions and Chrome with EME disabled in chrome://flags)\n    {\n        // Video Element\n        generateKeyRequest: 'webkitGenerateKeyRequest',\n        addKey: 'webkitAddKey',\n        cancelKeyRequest: 'webkitCancelKeyRequest',\n\n        // Events\n        needkey: 'webkitneedkey',\n        keyerror: 'webkitkeyerror',\n        keyadded: 'webkitkeyadded',\n        keymessage: 'webkitkeymessage'\n    }\n];\n\nconst APIS_ProtectionModel_3Feb2014 = [\n    // Un-prefixed as per spec\n    // Chrome 38-39 (and some earlier versions) with chrome://flags -- Enable Encrypted Media Extensions\n    {\n        // Video Element\n        setMediaKeys: 'setMediaKeys',\n        // MediaKeys\n        MediaKeys: 'MediaKeys',\n        // MediaKeySession\n        release: 'close',\n\n        // Events\n        needkey: 'needkey',\n        error: 'keyerror',\n        message: 'keymessage',\n        ready: 'keyadded',\n        close: 'keyclose'\n    },\n    // MS-prefixed (IE11, Windows 8.1)\n    {\n        // Video Element\n        setMediaKeys: 'msSetMediaKeys',\n        // MediaKeys\n        MediaKeys: 'MSMediaKeys',\n        // MediaKeySession\n        release: 'close',\n        // Events\n        needkey: 'msneedkey',\n        error: 'mskeyerror',\n        message: 'mskeymessage',\n        ready: 'mskeyadded',\n        close: 'mskeyclose'\n    }\n];\n\nfunction Protection() {\n\n    let instance;\n    let context = this.context;\n\n    /**\n     * Create a ProtectionController and associated ProtectionModel for use with\n     * a single piece of content.\n     *\n     * @param {Object} config\n     * @return {ProtectionController} protection controller\n     *\n     */\n    function createProtectionSystem(config) {\n\n        let controller = null;\n\n        let protectionKeyController = ProtectionKeyController(context).getInstance();\n        protectionKeyController.setConfig({log: config.log, BASE64: config.BASE64});\n        protectionKeyController.initialize();\n\n        let protectionModel =  getProtectionModel(config);\n\n        if (!controller && protectionModel) {//TODO add ability to set external controller if still needed at all?\n            controller = ProtectionController(context).create({\n                protectionModel: protectionModel,\n                protectionKeyController: protectionKeyController,\n                adapter: config.adapter,\n                eventBus: config.eventBus,\n                log: config.log,\n                events: config.events,\n                BASE64: config.BASE64,\n                Constants: config.Constants\n            });\n            config.capabilities.setEncryptedMediaSupported(true);\n        }\n        return controller;\n    }\n\n    function getProtectionModel(config) {\n\n        let log = config.log;\n        let eventBus = config.eventBus;\n        let errHandler = config.errHandler;\n        let videoElement = config.videoModel.getElement();\n\n        if (videoElement.onencrypted !== undefined &&\n            videoElement.mediaKeys !== undefined &&\n            navigator.requestMediaKeySystemAccess !== undefined &&\n            typeof navigator.requestMediaKeySystemAccess === 'function') {\n\n            log('EME detected on this user agent! (ProtectionModel_21Jan2015)');\n            return ProtectionModel_21Jan2015(context).create({log: log, eventBus: eventBus, events: config.events});\n\n        } else if (getAPI(videoElement, APIS_ProtectionModel_3Feb2014)) {\n\n            log('EME detected on this user agent! (ProtectionModel_3Feb2014)');\n            return ProtectionModel_3Feb2014(context).create({log: log, eventBus: eventBus, events: config.events, api: getAPI(videoElement, APIS_ProtectionModel_3Feb2014)});\n\n        } else if (getAPI(videoElement, APIS_ProtectionModel_01b)) {\n\n            log('EME detected on this user agent! (ProtectionModel_01b)');\n            return ProtectionModel_01b(context).create({log: log, eventBus: eventBus, errHandler: errHandler, events: config.events, api: getAPI(videoElement, APIS_ProtectionModel_01b)});\n\n        } else {\n\n            log('No supported version of EME detected on this user agent! - Attempts to play encrypted content will fail!');\n            return null;\n\n        }\n    }\n\n    function getAPI(videoElement, apis) {\n\n        for (let i = 0; i < apis.length; i++) {\n            let api = apis[i];\n            // detect if api is supported by browser\n            // check only first function in api -> should be fine\n            if (typeof videoElement[api[Object.keys(api)[0]]] !== 'function') {\n                continue;\n            }\n\n            return api;\n        }\n\n        return null;\n    }\n\n    instance = {\n        createProtectionSystem: createProtectionSystem\n    };\n\n    return instance;\n}\n\nProtection.__dashjs_factory_name = 'Protection';\nlet factory = dashjs.FactoryMaker.getClassFactory(Protection); /* jshint ignore:line */\nfactory.events = ProtectionEvents;\ndashjs.FactoryMaker.updateClassFactory(Protection.__dashjs_factory_name, factory); /* jshint ignore:line */\nexport default factory;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport EventsBase from '../../core/events/EventsBase';\n/**\n * @class\n *\n */\nclass ProtectionEvents extends EventsBase {\n    /**\n     * @description Public facing external events to be used when including protection package.\n     * All public events will be aggregated into the MediaPlayerEvents Class and can be accessed\n     * via MediaPlayer.events.  public_ is the prefix that we use to move event names to MediaPlayerEvents.\n     */\n    constructor () {\n        super();\n\n        /**\n         * Event ID for events delivered when the protection set receives\n         * a key message from the CDM\n         *\n         * @ignore\n         */\n        this.INTERNAL_KEY_MESSAGE = 'internalKeyMessage';\n\n        /**\n         * Event ID for events delivered when a key system selection procedure\n         * completes\n         * @ignore\n         */\n        this.INTERNAL_KEY_SYSTEM_SELECTED = 'internalKeySystemSelected';\n\n        /**\n         * Event ID for events delivered when a new key has been added\n         *\n         * @constant\n         * @deprecated The latest versions of the EME specification no longer\n         * use this event.  {@MediaPlayer.models.protectionModel.eventList.KEY_STATUSES_CHANGED}\n         * is preferred.\n         * @event ProtectionEvents#KEY_ADDED\n         */\n        this.KEY_ADDED = 'public_keyAdded';\n        /**\n         * Event ID for events delivered when an error is encountered by the CDM\n         * while processing a license server response message\n         * @event ProtectionEvents#KEY_ERROR\n         */\n        this.KEY_ERROR = 'public_keyError';\n\n        /**\n         * Event ID for events delivered when the protection set receives\n         * a key message from the CDM\n         * @event ProtectionEvents#KEY_MESSAGE\n         */\n        this.KEY_MESSAGE = 'public_keyMessage';\n\n        /**\n         * Event ID for events delivered when a key session close\n         * process has completed\n         * @event ProtectionEvents#KEY_SESSION_CLOSED\n         */\n        this.KEY_SESSION_CLOSED = 'public_keySessionClosed';\n\n        /**\n         * Event ID for events delivered when a new key sessions creation\n         * process has completed\n         * @event ProtectionEvents#KEY_SESSION_CREATED\n         */\n        this.KEY_SESSION_CREATED = 'public_keySessionCreated';\n\n        /**\n         * Event ID for events delivered when a key session removal\n         * process has completed\n         * @event ProtectionEvents#KEY_SESSION_REMOVED\n         */\n        this.KEY_SESSION_REMOVED = 'public_keySessionRemoved';\n\n\n        /**\n         * Event ID for events delivered when the status of one or more\n         * decryption keys has changed\n         * @event ProtectionEvents#KEY_STATUSES_CHANGED\n         */\n        this.KEY_STATUSES_CHANGED = 'public_keyStatusesChanged';\n\n        /**\n         * Event ID for events delivered when a key system access procedure\n         * has completed\n         * @ignore\n         */\n        this.KEY_SYSTEM_ACCESS_COMPLETE = 'keySystemAccessComplete';\n\n        /**\n         * Event ID for events delivered when a key system selection procedure\n         * completes\n         * @event ProtectionEvents#KEY_SYSTEM_SELECTED\n         */\n        this.KEY_SYSTEM_SELECTED = 'public_keySystemSelected';\n\n        /**\n         * Event ID for events delivered when a license request procedure\n         * has completed\n         * @event ProtectionEvents#LICENSE_REQUEST_COMPLETE\n         */\n        this.LICENSE_REQUEST_COMPLETE = 'public_licenseRequestComplete';\n\n        /**\n         * Event ID for needkey/encrypted events\n         * @ignore\n         */\n        this.NEED_KEY = 'needkey';\n\n        /**\n         * Event ID for events delivered when the Protection system is detected and created.\n         * @event ProtectionEvents#PROTECTION_CREATED\n         */\n        this.PROTECTION_CREATED = 'public_protectioncreated';\n\n        /**\n         * Event ID for events delivered when the Protection system is destroyed.\n         * @event ProtectionEvents#PROTECTION_DESTROYED\n         */\n        this.PROTECTION_DESTROYED = 'public_protectiondestroyed';\n\n        /**\n         * Event ID for events delivered when a new server certificate has\n         * been delivered to the CDM\n         * @ignore\n         */\n        this.SERVER_CERTIFICATE_UPDATED = 'serverCertificateUpdated';\n\n        /**\n         * Event ID for events delivered when the process of shutting down\n         * a protection set has completed\n         * @ignore\n         */\n        this.TEARDOWN_COMPLETE =  'protectionTeardownComplete';\n\n        /**\n         * Event ID for events delivered when a HTMLMediaElement has been\n         * associated with the protection set\n         * @ignore\n         */\n        this.VIDEO_ELEMENT_SELECTED = 'videoElementSelected';\n    }\n}\n\nlet protectionEvents = new ProtectionEvents();\nexport default protectionEvents;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport CommonEncryption from '../CommonEncryption';\nimport MediaCapability from '../vo/MediaCapability';\nimport KeySystemConfiguration from '../vo/KeySystemConfiguration';\n\n/**\n * @module ProtectionController\n * @description Provides access to media protection information and functionality.  Each\n * ProtectionController manages a single {@link MediaPlayer.models.ProtectionModel}\n * which encapsulates a set of protection information (EME APIs, selected key system,\n * key sessions).  The APIs of ProtectionController mostly align with the latest EME\n * APIs.  Key system selection is mostly automated when combined with app-overrideable\n * functionality provided in {@link ProtectionKeyController}.\n * @todo ProtectionController does almost all of its tasks automatically after init() is\n * called.  Applications might want more control over this process and want to go through\n * each step manually (key system selection, session creation, session maintenance).\n * @param {Object} config\n */\n\nfunction ProtectionController(config) {\n\n    const protectionKeyController = config.protectionKeyController;\n    let protectionModel = config.protectionModel;\n    let adapter = config.adapter;\n    let eventBus = config.eventBus;\n    const events = config.events;\n    let log = config.log;\n    let BASE64 = config.BASE64;\n    const Constants = config.Constants;\n\n    let instance,\n        pendingNeedKeyData,\n        audioInfo,\n        videoInfo,\n        protDataSet,\n        initialized,\n        sessionType,\n        robustnessLevel,\n        keySystem;\n\n    function setup() {\n        pendingNeedKeyData = [];\n        initialized = false;\n        sessionType = 'temporary';\n        robustnessLevel = '';\n    }\n\n    /**\n     * Initialize this protection system with a given manifest and optional audio\n     * and video stream information.\n     *\n     * @param {Object} manifest the json version of the manifest XML document for the\n     * desired content.  Applications can download their manifest using\n     * {@link module:MediaPlayer#retrieveManifest}\n     * @param {StreamInfo} [aInfo] audio stream information\n     * @param {StreamInfo} [vInfo] video stream information\n     * @memberof module:ProtectionController\n     * @instance\n     * @todo This API will change when we have better support for allowing applications\n     * to select different adaptation sets for playback.  Right now it is clunky for\n     * applications to create {@link StreamInfo} with the right information,\n     */\n    function initialize(manifest, aInfo, vInfo) {\n        // TODO: We really need to do much more here... We need to be smarter about knowing\n        // which adaptation sets for which we have initialized, including the default key ID\n        // value from the ContentProtection elements so we know whether or not we still need to\n        // select key systems and acquire keys.\n        if (!initialized) {\n            let streamInfo;\n\n            if (!aInfo && !vInfo) {\n                // Look for ContentProtection elements.  InitData can be provided by either the\n                // dash264drm:Pssh ContentProtection format or a DRM-specific format.\n                streamInfo = adapter.getStreamsInfo()[0]; // TODO: Single period only for now. See TODO above\n            }\n\n            audioInfo = aInfo || (streamInfo ? adapter.getMediaInfoForType(streamInfo, Constants.AUDIO) : null);\n            videoInfo = vInfo || (streamInfo ? adapter.getMediaInfoForType(streamInfo, Constants.VIDEO) : null);\n            const mediaInfo = (videoInfo) ? videoInfo : audioInfo; // We could have audio or video only\n\n            // ContentProtection elements are specified at the AdaptationSet level, so the CP for audio\n            // and video will be the same.  Just use one valid MediaInfo object\n            const supportedKS = protectionKeyController.getSupportedKeySystemsFromContentProtection(mediaInfo.contentProtection);\n            if (supportedKS && supportedKS.length > 0) {\n                selectKeySystem(supportedKS, true);\n            }\n\n            initialized = true;\n        }\n    }\n\n    /**\n     * Returns a set of supported key systems and CENC initialization data\n     * from the given array of ContentProtection elements.  Only\n     * key systems that are supported by this player will be returned.\n     * Key systems are returned in priority order (highest first).\n     *\n     * @param {Array.<Object>} cps - array of content protection elements parsed\n     * from the manifest\n     * @returns {Array.<Object>} array of objects indicating which supported key\n     * systems were found.  Empty array is returned if no\n     * supported key systems were found\n     * @memberof module:ProtectionKeyController\n     * @instance\n     */\n    function getSupportedKeySystemsFromContentProtection(cps) {\n        return protectionKeyController.getSupportedKeySystemsFromContentProtection(cps);\n    }\n\n    /**\n     * Create a new key session associated with the given initialization data from\n     * the MPD or from the PSSH box in the media\n     *\n     * @param {ArrayBuffer} initData the initialization data\n     * @memberof module:ProtectionController\n     * @instance\n     * @fires ProtectionController#KeySessionCreated\n     * @todo In older versions of the EME spec, there was a one-to-one relationship between\n     * initialization data and key sessions.  That is no longer true in the latest APIs.  This\n     * API will need to modified (and a new \"generateRequest(keySession, initData)\" API created)\n     * to come up to speed with the latest EME standard\n     */\n    function createKeySession(initData) {\n        const initDataForKS = CommonEncryption.getPSSHForKeySystem(keySystem, initData);\n        if (initDataForKS) {\n\n            // Check for duplicate initData\n            const currentInitData = protectionModel.getAllInitData();\n            for (let i = 0; i < currentInitData.length; i++) {\n                if (protectionKeyController.initDataEquals(initDataForKS, currentInitData[i])) {\n                    log('DRM: Ignoring initData because we have already seen it!');\n                    return;\n                }\n            }\n            try {\n                protectionModel.createKeySession(initDataForKS, sessionType);\n            } catch (error) {\n                eventBus.trigger(events.KEY_SESSION_CREATED, {data: null, error: 'Error creating key session! ' + error.message});\n            }\n        } else {\n            eventBus.trigger(events.KEY_SESSION_CREATED, {data: null, error: 'Selected key system is ' + keySystem.systemString + '.  needkey/encrypted event contains no initData corresponding to that key system!'});\n        }\n    }\n\n    /**\n     * Loads a key session with the given session ID from persistent storage.  This\n     * essentially creates a new key session\n     *\n     * @param {string} sessionID\n     * @memberof module:ProtectionController\n     * @instance\n     * @fires ProtectionController#KeySessionCreated\n     */\n    function loadKeySession(sessionID) {\n        protectionModel.loadKeySession(sessionID);\n    }\n\n    /**\n     * Removes the given key session from persistent storage and closes the session\n     * as if {@link ProtectionController#closeKeySession}\n     * was called\n     *\n     * @param {SessionToken} sessionToken the session\n     * token\n     * @memberof module:ProtectionController\n     * @instance\n     * @fires ProtectionController#KeySessionRemoved\n     * @fires ProtectionController#KeySessionClosed\n     */\n    function removeKeySession(sessionToken) {\n        protectionModel.removeKeySession(sessionToken);\n    }\n\n    /**\n     * Closes the key session and releases all associated decryption keys.  These\n     * keys will no longer be available for decrypting media\n     *\n     * @param {SessionToken} sessionToken the session\n     * token\n     * @memberof module:ProtectionController\n     * @instance\n     * @fires ProtectionController#KeySessionClosed\n     */\n    function closeKeySession(sessionToken) {\n        protectionModel.closeKeySession(sessionToken);\n    }\n\n    /**\n     * Sets a server certificate for use by the CDM when signing key messages\n     * intended for a particular license server.  This will fire\n     * an error event if a key system has not yet been selected.\n     *\n     * @param {ArrayBuffer} serverCertificate a CDM-specific license server\n     * certificate\n     * @memberof module:ProtectionController\n     * @instance\n     * @fires ProtectionController#ServerCertificateUpdated\n     */\n    function setServerCertificate(serverCertificate) {\n        protectionModel.setServerCertificate(serverCertificate);\n    }\n\n    /**\n     * Associate this protection system with the given HTMLMediaElement.  This\n     * causes the system to register for needkey/encrypted events from the given\n     * element and provides a destination for setting of MediaKeys\n     *\n     * @param {HTMLMediaElement} element the media element to which the protection\n     * system should be associated\n     * @memberof module:ProtectionController\n     * @instance\n     */\n    function setMediaElement(element) {\n        if (element) {\n            protectionModel.setMediaElement(element);\n            eventBus.on(events.NEED_KEY, onNeedKey, this);\n            eventBus.on(events.INTERNAL_KEY_MESSAGE, onKeyMessage, this);\n        } else if (element === null) {\n            protectionModel.setMediaElement(element);\n            eventBus.off(events.NEED_KEY, onNeedKey, this);\n            eventBus.off(events.INTERNAL_KEY_MESSAGE, onKeyMessage, this);\n        }\n    }\n\n    /**\n     * Sets the session type to use when creating key sessions.  Either \"temporary\" or\n     * \"persistent-license\".  Default is \"temporary\".\n     *\n     * @param {string} value the session type\n     * @memberof module:ProtectionController\n     * @instance\n     */\n    function setSessionType(value) {\n        sessionType = value;\n    }\n\n    /**\n     * Sets the robustness level for video and audio capabilities. Optional to remove Chrome warnings.\n     * Possible values are SW_SECURE_CRYPTO, SW_SECURE_DECODE, HW_SECURE_CRYPTO, HW_SECURE_CRYPTO, HW_SECURE_DECODE, HW_SECURE_ALL.\n     *\n     * @param {string} level the robustness level\n     * @memberof module:ProtectionController\n     * @instance\n     */\n    function setRobustnessLevel(level) {\n        robustnessLevel = level;\n    }\n\n    /**\n     * Attach KeySystem-specific data to use for license acquisition with EME\n     *\n     * @param {Object} data an object containing property names corresponding to\n     * key system name strings (e.g. \"org.w3.clearkey\") and associated values\n     * being instances of {@link ProtectionData}\n     * @memberof module:ProtectionController\n     * @instance\n     */\n    function setProtectionData(data) {\n        protDataSet = data;\n        protectionKeyController.setProtectionData(data);\n    }\n\n    /**\n     * Destroys all protection data associated with this protection set.  This includes\n     * deleting all key sessions.  In the case of persistent key sessions, the sessions\n     * will simply be unloaded and not deleted.  Additionally, if this protection set is\n     * associated with a HTMLMediaElement, it will be detached from that element.\n     *\n     * @memberof module:ProtectionController\n     * @instance\n     */\n    function reset() {\n        setMediaElement(null);\n\n        keySystem = undefined;//TODO-Refactor look at why undefined is needed for this. refactor\n\n        if (protectionModel) {\n            protectionModel.reset();\n            protectionModel = null;\n        }\n    }\n\n    ///////////////\n    // Private\n    ///////////////\n\n    function getProtData(keySystem) {\n        let protData = null;\n        const keySystemString = keySystem.systemString;\n\n        if (protDataSet) {\n            protData = (keySystemString in protDataSet) ? protDataSet[keySystemString] : null;\n        }\n        return protData;\n    }\n\n    function getKeySystemConfiguration(keySystem) {\n        const protData = getProtData(keySystem);\n        const audioCapabilities = [];\n        const videoCapabilities = [];\n        const audioRobustness = (protData && protData.audioRobustness && protData.audioRobustness.length > 0) ? protData.audioRobustness : robustnessLevel;\n        const videoRobustness = (protData && protData.videoRobustness && protData.videoRobustness.length > 0) ? protData.videoRobustness : robustnessLevel;\n\n        if (audioInfo) {\n            audioCapabilities.push(new MediaCapability(audioInfo.codec, audioRobustness));\n        }\n        if (videoInfo) {\n            videoCapabilities.push(new MediaCapability(videoInfo.codec, videoRobustness));\n        }\n\n        return new KeySystemConfiguration(\n            audioCapabilities, videoCapabilities, 'optional',\n            (sessionType === 'temporary') ? 'optional' : 'required',\n            [sessionType]);\n    }\n\n    function selectKeySystem(supportedKS, fromManifest) {\n        const self = this;\n        const requestedKeySystems = [];\n\n        let ksIdx;\n        if (keySystem) {\n            // We have a key system\n            for (ksIdx = 0; ksIdx < supportedKS.length; ksIdx++) {\n                if (keySystem === supportedKS[ksIdx].ks) {\n\n                    requestedKeySystems.push({ks: supportedKS[ksIdx].ks, configs: [getKeySystemConfiguration(keySystem)]});\n\n                    // Ensure that we would be granted key system access using the key\n                    // system and codec information\n                    const onKeySystemAccessComplete = function (event) {\n                        eventBus.off(events.KEY_SYSTEM_ACCESS_COMPLETE, onKeySystemAccessComplete, self);\n                        if (event.error) {\n                            if (!fromManifest) {\n                                eventBus.trigger(events.KEY_SYSTEM_SELECTED, {error: 'DRM: KeySystem Access Denied! -- ' + event.error});\n                            }\n                        } else {\n                            log('DRM: KeySystem Access Granted');\n                            eventBus.trigger(events.KEY_SYSTEM_SELECTED, {data: event.data});\n                            createKeySession(supportedKS[ksIdx].initData);\n                        }\n                    };\n                    eventBus.on(events.KEY_SYSTEM_ACCESS_COMPLETE, onKeySystemAccessComplete, self);\n                    protectionModel.requestKeySystemAccess(requestedKeySystems);\n                    break;\n                }\n            }\n        }\n        else if (keySystem === undefined) {\n            // First time through, so we need to select a key system\n            keySystem = null;\n            pendingNeedKeyData.push(supportedKS);\n\n            // Add all key systems to our request list since we have yet to select a key system\n            for (let i = 0; i < supportedKS.length; i++) {\n                requestedKeySystems.push({ks: supportedKS[i].ks, configs: [getKeySystemConfiguration(supportedKS[i].ks)]});\n            }\n\n            let keySystemAccess;\n            const onKeySystemAccessComplete = function (event) {\n                eventBus.off(events.KEY_SYSTEM_ACCESS_COMPLETE, onKeySystemAccessComplete, self);\n                if (event.error) {\n                    keySystem = undefined;\n                    eventBus.off(events.INTERNAL_KEY_SYSTEM_SELECTED, onKeySystemSelected, self);\n\n                    if (!fromManifest) {\n                        eventBus.trigger(events.KEY_SYSTEM_SELECTED, {data: null, error: 'DRM: KeySystem Access Denied! -- ' + event.error});\n                    }\n                } else {\n                    keySystemAccess = event.data;\n                    log('DRM: KeySystem Access Granted (' + keySystemAccess.keySystem.systemString + ')!  Selecting key system...');\n                    protectionModel.selectKeySystem(keySystemAccess);\n                }\n            };\n            var onKeySystemSelected = function (event) {\n                eventBus.off(events.INTERNAL_KEY_SYSTEM_SELECTED, onKeySystemSelected, self);\n                eventBus.off(events.KEY_SYSTEM_ACCESS_COMPLETE, onKeySystemAccessComplete, self);\n                if (!event.error) {\n                    keySystem = protectionModel.getKeySystem();\n                    eventBus.trigger(events.KEY_SYSTEM_SELECTED, {data: keySystemAccess});\n                    // Set server certificate from protData\n                    const protData = getProtData(keySystem);\n                    if (protData && protData.serverCertificate && protData.serverCertificate.length > 0) {\n                        protectionModel.setServerCertificate(BASE64.decodeArray(protData.serverCertificate).buffer);\n                    }\n                    for (let i = 0; i < pendingNeedKeyData.length; i++) {\n                        for (ksIdx = 0; ksIdx < pendingNeedKeyData[i].length; ksIdx++) {\n                            if (keySystem === pendingNeedKeyData[i][ksIdx].ks) {\n                                createKeySession(pendingNeedKeyData[i][ksIdx].initData);\n                                break;\n                            }\n                        }\n                    }\n                } else {\n                    keySystem = undefined;\n                    if (!fromManifest) {\n                        eventBus.trigger(events.KEY_SYSTEM_SELECTED, {data: null, error: 'DRM: Error selecting key system! -- ' + event.error});\n                    }\n                }\n            };\n            eventBus.on(events.INTERNAL_KEY_SYSTEM_SELECTED, onKeySystemSelected, self);\n            eventBus.on(events.KEY_SYSTEM_ACCESS_COMPLETE, onKeySystemAccessComplete, self);\n            protectionModel.requestKeySystemAccess(requestedKeySystems);\n        } else {\n            // We are in the process of selecting a key system, so just save the data\n            pendingNeedKeyData.push(supportedKS);\n        }\n    }\n\n    function sendLicenseRequestCompleteEvent(data, error) {\n        eventBus.trigger(events.LICENSE_REQUEST_COMPLETE, {data: data, error: error});\n    }\n\n    function onKeyMessage(e) {\n        log('DRM: onKeyMessage');\n        if (e.error) {\n            log(e.error);\n            return;\n        }\n\n        // Dispatch event to applications indicating we received a key message\n        const keyMessage = e.data;\n        eventBus.trigger(events.KEY_MESSAGE, {data: keyMessage});\n        const messageType = (keyMessage.messageType) ? keyMessage.messageType : 'license-request';\n        const message = keyMessage.message;\n        const sessionToken = keyMessage.sessionToken;\n        const protData = getProtData(keySystem);\n        const keySystemString = keySystem.systemString;\n        const licenseServerData = protectionKeyController.getLicenseServer(keySystem, protData, messageType);\n        const eventData = { sessionToken: sessionToken, messageType: messageType };\n\n        // Message not destined for license server\n        if (!licenseServerData) {\n            log('DRM: License server request not required for this message (type = ' + e.data.messageType + ').  Session ID = ' + sessionToken.getSessionID());\n            sendLicenseRequestCompleteEvent(eventData);\n            return;\n        }\n\n        // Perform any special handling for ClearKey\n        if (protectionKeyController.isClearKey(keySystem)) {\n            const clearkeys = protectionKeyController.processClearKeyLicenseRequest(protData, message);\n            if (clearkeys)  {\n                log('DRM: ClearKey license request handled by application!');\n                sendLicenseRequestCompleteEvent(eventData);\n                protectionModel.updateKeySession(sessionToken, clearkeys);\n                return;\n            }\n        }\n\n        // All remaining key system scenarios require a request to a remote license server\n        const xhr = new XMLHttpRequest();\n\n        // Determine license server URL\n        let url = null;\n        if (protData && protData.serverURL) {\n            const serverURL = protData.serverURL;\n            if (typeof serverURL === 'string' && serverURL !== '') {\n                url = serverURL;\n            } else if (typeof serverURL === 'object' && serverURL.hasOwnProperty(messageType)) {\n                url = serverURL[messageType];\n            }\n        } else if (protData && protData.laURL && protData.laURL !== '') {\n            // TODO: Deprecated!\n            url = protData.laURL;\n        } else {\n            url = keySystem.getLicenseServerURLFromInitData(CommonEncryption.getPSSHData(sessionToken.initData));\n            if (!url) {\n                url = e.data.laURL;\n            }\n        }\n        // Possibly update or override the URL based on the message\n        url = licenseServerData.getServerURLFromMessage(url, message, messageType);\n\n        // Ensure valid license server URL\n        if (!url) {\n            sendLicenseRequestCompleteEvent(eventData, 'DRM: No license server URL specified!');\n            return;\n        }\n\n        const reportError = function (xhr, eventData, keySystemString, messageType) {\n            const errorMsg = ((xhr.response) ? licenseServerData.getErrorResponse(xhr.response, keySystemString, messageType) : 'NONE');\n            sendLicenseRequestCompleteEvent(eventData, 'DRM: ' + keySystemString + ' update, XHR complete. status is \"' + xhr.statusText + '\" (' + xhr.status + '), readyState is ' + xhr.readyState + '.  Response is ' + errorMsg);\n        };\n\n        xhr.open(licenseServerData.getHTTPMethod(messageType), url, true);\n        xhr.responseType = licenseServerData.getResponseType(keySystemString, messageType);\n        xhr.onload = function () {\n            if (this.status == 200) {\n                const licenseMessage = licenseServerData.getLicenseMessage(this.response, keySystemString, messageType);\n                if (licenseMessage !== null) {\n                    sendLicenseRequestCompleteEvent(eventData);\n                    protectionModel.updateKeySession(sessionToken, licenseMessage);\n                } else {\n                    reportError(this, eventData, keySystemString, messageType);\n                }\n            } else {\n                reportError(this, eventData, keySystemString, messageType);\n            }\n        };\n        xhr.onabort = function () {\n            sendLicenseRequestCompleteEvent(eventData, 'DRM: ' + keySystemString + ' update, XHR aborted. status is \"' + this.statusText + '\" (' + this.status + '), readyState is ' + this.readyState);\n        };\n        xhr.onerror = function () {\n            sendLicenseRequestCompleteEvent(eventData, 'DRM: ' + keySystemString + ' update, XHR error. status is \"' + this.statusText + '\" (' + this.status + '), readyState is ' + this.readyState);\n        };\n\n        // Set optional XMLHttpRequest headers from protection data and message\n        const updateHeaders = function (headers) {\n            if (headers) {\n                for (const key in headers) {\n                    if ('authorization' === key.toLowerCase()) {\n                        xhr.withCredentials = true;\n                    }\n                    xhr.setRequestHeader(key, headers[key]);\n                }\n            }\n        };\n        if (protData) {\n            updateHeaders(protData.httpRequestHeaders);\n        }\n        updateHeaders(keySystem.getRequestHeadersFromMessage(message));\n\n        // Set withCredentials property from protData\n        if (protData && protData.withCredentials) {\n            xhr.withCredentials = true;\n        }\n\n        xhr.send(keySystem.getLicenseRequestFromMessage(message));\n    }\n\n    function onNeedKey(event) {\n        log('DRM: onNeedKey');\n        // Ignore non-cenc initData\n        if (event.key.initDataType !== 'cenc') {\n            log('DRM:  Only \\'cenc\\' initData is supported!  Ignoring initData of type: ' + event.key.initDataType);\n            return;\n        }\n\n        // Some browsers return initData as Uint8Array (IE), some as ArrayBuffer (Chrome).\n        // Convert to ArrayBuffer\n        let abInitData = event.key.initData;\n        if (ArrayBuffer.isView(abInitData)) {\n            abInitData = abInitData.buffer;\n        }\n\n        // If key system has already been selected and initData already seen, then do nothing\n        if (keySystem) {\n            const initDataForKS = CommonEncryption.getPSSHForKeySystem(keySystem, abInitData);\n            if (initDataForKS) {\n\n                // Check for duplicate initData\n                const currentInitData = protectionModel.getAllInitData();\n                for (let i = 0; i < currentInitData.length; i++) {\n                    if (protectionKeyController.initDataEquals(initDataForKS, currentInitData[i])) {\n                        log('DRM: Ignoring initData because we have already seen it!');\n                        return;\n                    }\n                }\n            }\n        }\n\n        log('DRM: initData:', String.fromCharCode.apply(null, new Uint8Array(abInitData)));\n\n        const supportedKS = protectionKeyController.getSupportedKeySystems(abInitData, protDataSet);\n        if (supportedKS.length === 0) {\n            log('DRM: Received needkey event with initData, but we don\\'t support any of the key systems!');\n            return;\n        }\n\n        selectKeySystem(supportedKS, false);\n    }\n\n    function getKeySystems() {\n        return protectionKeyController ? protectionKeyController.getKeySystems() : [];\n    }\n\n    instance = {\n        initialize: initialize,\n        createKeySession: createKeySession,\n        loadKeySession: loadKeySession,\n        removeKeySession: removeKeySession,\n        closeKeySession: closeKeySession,\n        setServerCertificate: setServerCertificate,\n        setMediaElement: setMediaElement,\n        setSessionType: setSessionType,\n        setRobustnessLevel: setRobustnessLevel,\n        setProtectionData: setProtectionData,\n        getSupportedKeySystemsFromContentProtection: getSupportedKeySystemsFromContentProtection,\n        getKeySystems: getKeySystems,\n        reset: reset\n    };\n\n    setup();\n    return instance;\n}\n\nProtectionController.__dashjs_factory_name = 'ProtectionController';\nexport default dashjs.FactoryMaker.getClassFactory(ProtectionController); /* jshint ignore:line */\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport CommonEncryption from './../CommonEncryption';\nimport KeySystemClearKey from './../drm/KeySystemClearKey';\nimport KeySystemWidevine from './../drm/KeySystemWidevine';\nimport KeySystemPlayReady from './../drm/KeySystemPlayReady';\nimport DRMToday from './../servers/DRMToday';\nimport PlayReady from './../servers/PlayReady';\nimport Widevine from './../servers/Widevine';\nimport ClearKey from './../servers/ClearKey';\n\n/**\n * @module ProtectionKeyController\n * @description Media protection key system functionality that can be modified/overridden by applications\n */\nfunction ProtectionKeyController() {\n\n    let context = this.context;\n\n    let instance,\n        log,\n        keySystems,\n        BASE64,\n        clearkeyKeySystem;\n\n    function setConfig(config) {\n        if (!config) return;\n\n        if (config.log) {\n            log = config.log;\n        }\n\n        if (config.BASE64) {\n            BASE64 = config.BASE64;\n        }\n    }\n\n    function initialize() {\n        keySystems = [];\n\n        let keySystem;\n\n        // PlayReady\n        keySystem = KeySystemPlayReady(context).getInstance({BASE64: BASE64});\n        keySystems.push(keySystem);\n\n        // Widevine\n        keySystem = KeySystemWidevine(context).getInstance({BASE64: BASE64});\n        keySystems.push(keySystem);\n\n        // ClearKey\n        keySystem = KeySystemClearKey(context).getInstance({BASE64: BASE64});\n        keySystems.push(keySystem);\n        clearkeyKeySystem = keySystem;\n    }\n\n    /**\n     * Returns a prioritized list of key systems supported\n     * by this player (not necessarily those supported by the\n     * user agent)\n     *\n     * @returns {Array.<KeySystem>} a prioritized\n     * list of key systems\n     * @memberof module:ProtectionKeyController\n     * @instance\n     */\n    function getKeySystems() {\n        return keySystems;\n    }\n\n    /**\n     * Returns the key system associated with the given key system string\n     * name (i.e. 'org.w3.clearkey')\n     *\n     * @param {string} systemString the system string\n     * @returns {KeySystem|null} the key system\n     * or null if no supported key system is associated with the given key\n     * system string\n     * @memberof module:ProtectionKeyController\n     * @instance\n     */\n    function getKeySystemBySystemString(systemString) {\n        for (let i = 0; i < keySystems.length; i++) {\n            if (keySystems[i].systemString === systemString) {\n                return keySystems[i];\n            }\n        }\n        return null;\n    }\n\n    /**\n     * Determines whether the given key system is ClearKey.  This is\n     * necessary because the EME spec defines ClearKey and its method\n     * for providing keys to the key session; and this method has changed\n     * between the various API versions.  Our EME-specific ProtectionModels\n     * must know if the system is ClearKey so that it can format the keys\n     * according to the particular spec version.\n     *\n     * @param {Object} keySystem the key\n     * @returns {boolean} true if this is the ClearKey key system, false\n     * otherwise\n     * @memberof module:ProtectionKeyController\n     * @instance\n     */\n    function isClearKey(keySystem) {\n        return (keySystem === clearkeyKeySystem);\n    }\n\n    /**\n     * Check equality of initData array buffers.\n     *\n     * @param {ArrayBuffer} initData1 - first initData\n     * @param {ArrayBuffer} initData2 - second initData\n     * @returns {boolean} true if the initData arrays are equal in size and\n     * contents, false otherwise\n     * @memberof module:ProtectionKeyController\n     * @instance\n     */\n    function initDataEquals(initData1, initData2) {\n        if (initData1.byteLength === initData2.byteLength) {\n            let data1 = new Uint8Array(initData1);\n            let data2 = new Uint8Array(initData2);\n\n            for (let j = 0; j < data1.length; j++) {\n                if (data1[j] !== data2[j]) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Returns a set of supported key systems and CENC initialization data\n     * from the given array of ContentProtection elements.  Only\n     * key systems that are supported by this player will be returned.\n     * Key systems are returned in priority order (highest first).\n     *\n     * @param {Array.<Object>} cps - array of content protection elements parsed\n     * from the manifest\n     * @returns {Array.<Object>} array of objects indicating which supported key\n     * systems were found.  Empty array is returned if no\n     * supported key systems were found\n     * @memberof module:ProtectionKeyController\n     * @instance\n     */\n    function getSupportedKeySystemsFromContentProtection(cps) {\n        let cp, ks, ksIdx, cpIdx;\n        let supportedKS = [];\n\n        if (cps) {\n            for (ksIdx = 0; ksIdx < keySystems.length; ++ksIdx) {\n                ks = keySystems[ksIdx];\n                for (cpIdx = 0; cpIdx < cps.length; ++cpIdx) {\n                    cp = cps[cpIdx];\n                    if (cp.schemeIdUri.toLowerCase() === ks.schemeIdURI) {\n\n                        // Look for DRM-specific ContentProtection\n                        let initData = ks.getInitData(cp);\n                        if (!!initData) {\n                            supportedKS.push({\n                                ks: keySystems[ksIdx],\n                                initData: initData\n                            });\n                        }\n                    }\n                }\n            }\n        }\n        return supportedKS;\n    }\n\n    /**\n     * Returns key systems supported by this player for the given PSSH\n     * initializationData. Only key systems supported by this player\n     * that have protection data present will be returned.  Key systems are returned in priority order\n     * (highest priority first)\n     *\n     * @param {ArrayBuffer} initData Concatenated PSSH data for all DRMs\n     * supported by the content\n     * @param {ProtectionData} protDataSet user specified protection data - license server url etc\n     * supported by the content\n     * @returns {Array.<Object>} array of objects indicating which supported key\n     * systems were found.  Empty array is returned if no\n     * supported key systems were found\n     * @memberof module:ProtectionKeyController\n     * @instance\n     */\n    function getSupportedKeySystems(initData, protDataSet) {\n        let supportedKS = [];\n        let pssh = CommonEncryption.parsePSSHList(initData);\n\n        for (let ksIdx = 0; ksIdx < keySystems.length; ++ksIdx) {\n            let keySystemString = keySystems[ksIdx].systemString;\n            let shouldNotFilterOutKeySystem = (protDataSet) ? keySystemString in protDataSet : true;\n\n            if (keySystems[ksIdx].uuid in pssh && shouldNotFilterOutKeySystem) {\n                supportedKS.push({\n                    ks: keySystems[ksIdx],\n                    initData: pssh[keySystems[ksIdx].uuid]\n                });\n            }\n        }\n        return supportedKS;\n    }\n\n    /**\n     * Returns the license server implementation data that should be used for this request.\n     *\n     * @param {KeySystem} keySystem the key system\n     * associated with this license request\n     * @param {ProtectionData} protData protection data to use for the\n     * request\n     * @param {string} [messageType=\"license-request\"] the message type associated with this\n     * request.  Supported message types can be found\n     * {@link https://w3c.github.io/encrypted-media/#idl-def-MediaKeyMessageType|here}.\n     * @returns {LicenseServer|null} the license server\n     * implementation that should be used for this request or null if the player should not\n     * pass messages of the given type to a license server\n     * @memberof module:ProtectionKeyController\n     * @instance\n     *\n     */\n    function getLicenseServer(keySystem, protData, messageType) {\n\n        // Our default server implementations do not do anything with \"license-release\" or\n        // \"individualization-request\" messages, so we just send a success event\n        if (messageType === 'license-release' || messageType === 'individualization-request') {\n            return null;\n        }\n\n        let licenseServerData = null;\n        if (protData && protData.hasOwnProperty('drmtoday')) {\n            licenseServerData = DRMToday(context).getInstance({BASE64: BASE64});\n        } else if (keySystem.systemString === 'com.widevine.alpha') {\n            licenseServerData = Widevine(context).getInstance();\n        } else if (keySystem.systemString === 'com.microsoft.playready') {\n            licenseServerData = PlayReady(context).getInstance();\n        } else if (keySystem.systemString === 'org.w3.clearkey') {\n            licenseServerData = ClearKey(context).getInstance();\n        }\n\n        return licenseServerData;\n    }\n\n    /**\n     * Allows application-specific retrieval of ClearKey keys.\n     *\n     * @param {ProtectionData} protData protection data to use for the\n     * request\n     * @param {ArrayBuffer} message the key message from the CDM\n     * @return {ClearKeyKeySet|null} the clear keys associated with\n     * the request or null if no keys can be returned by this function\n     * @memberof module:ProtectionKeyController\n     * @instance\n     */\n    function processClearKeyLicenseRequest(protData, message) {\n        try {\n            return clearkeyKeySystem.getClearKeysFromProtectionData(protData, message);\n        } catch (error) {\n            log('Failed to retrieve clearkeys from ProtectionData: ' + error);\n            return null;\n        }\n    }\n\n    function setProtectionData(protectionDataSet) {\n        var getProtectionData = function (keySystemString) {\n            var protData = null;\n            if (protectionDataSet) {\n                protData = (keySystemString in protectionDataSet) ? protectionDataSet[keySystemString] : null;\n            }\n            return protData;\n        };\n\n        for (var i = 0; i < keySystems.length; i++) {\n            var keySystem = keySystems[i];\n            if (keySystem.hasOwnProperty('init')) {\n                keySystem.init(getProtectionData(keySystem.systemString));\n            }\n        }\n    }\n\n    instance = {\n        initialize: initialize,\n        setProtectionData: setProtectionData,\n        isClearKey: isClearKey,\n        initDataEquals: initDataEquals,\n        getKeySystems: getKeySystems,\n        getKeySystemBySystemString: getKeySystemBySystemString,\n        getSupportedKeySystemsFromContentProtection: getSupportedKeySystemsFromContentProtection,\n        getSupportedKeySystems: getSupportedKeySystems,\n        getLicenseServer: getLicenseServer,\n        processClearKeyLicenseRequest: processClearKeyLicenseRequest,\n        setConfig: setConfig\n    };\n\n    return instance;\n}\n\nProtectionKeyController.__dashjs_factory_name = 'ProtectionKeyController';\nexport default dashjs.FactoryMaker.getSingletonFactory(ProtectionKeyController); /* jshint ignore:line */\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport KeyPair from '../vo/KeyPair';\nimport ClearKeyKeySet from '../vo/ClearKeyKeySet';\nimport CommonEncryption from '../CommonEncryption';\n\nconst uuid = '1077efec-c0b2-4d02-ace3-3c1e52e2fb4b';\nconst systemString = 'org.w3.clearkey';\nconst schemeIdURI = 'urn:uuid:' + uuid;\n\nfunction KeySystemClearKey(config) {\n\n    let instance;\n    let BASE64 = config.BASE64;\n    /**\n     * Returns desired clearkeys (as specified in the CDM message) from protection data\n     *\n     * @param {ProtectionData} protectionData the protection data\n     * @param {ArrayBuffer} message the ClearKey CDM message\n     * @returns {ClearKeyKeySet} the key set or null if none found\n     * @throws {Error} if a keyID specified in the CDM message was not found in the\n     * protection data\n     * @memberof KeySystemClearKey\n     */\n    function getClearKeysFromProtectionData(protectionData, message) {\n        let clearkeySet = null;\n        if (protectionData) {\n            // ClearKey is the only system that does not require a license server URL, so we\n            // handle it here when keys are specified in protection data\n            let jsonMsg = JSON.parse(String.fromCharCode.apply(null, new Uint8Array(message)));\n            let keyPairs = [];\n            for (let i = 0; i < jsonMsg.kids.length; i++) {\n                let clearkeyID = jsonMsg.kids[i];\n                let clearkey = (protectionData.clearkeys.hasOwnProperty(clearkeyID)) ? protectionData.clearkeys[clearkeyID] : null;\n                if (!clearkey) {\n                    throw new Error('DRM: ClearKey keyID (' + clearkeyID + ') is not known!');\n                }\n                // KeyIDs from CDM are not base64 padded.  Keys may or may not be padded\n                keyPairs.push(new KeyPair(clearkeyID, clearkey));\n            }\n            clearkeySet = new ClearKeyKeySet(keyPairs);\n        }\n        return clearkeySet;\n    }\n\n    function getInitData(cp) {\n        return CommonEncryption.parseInitDataFromContentProtection(cp, BASE64);\n    }\n\n    function getRequestHeadersFromMessage(/*message*/) {\n        return null;\n    }\n\n    function getLicenseRequestFromMessage(message) {\n        return new Uint8Array(message);\n    }\n\n    function getLicenseServerURLFromInitData(/*initData*/) {\n        return null;\n    }\n\n    instance = {\n        uuid: uuid,\n        schemeIdURI: schemeIdURI,\n        systemString: systemString,\n        getInitData: getInitData,\n        getRequestHeadersFromMessage: getRequestHeadersFromMessage,\n        getLicenseRequestFromMessage: getLicenseRequestFromMessage,\n        getLicenseServerURLFromInitData: getLicenseServerURLFromInitData,\n        getClearKeysFromProtectionData: getClearKeysFromProtectionData\n    };\n\n    return instance;\n}\n\nKeySystemClearKey.__dashjs_factory_name = 'KeySystemClearKey';\nexport default dashjs.FactoryMaker.getSingletonFactory(KeySystemClearKey); /* jshint ignore:line */\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * Microsoft PlayReady DRM\n *\n * @class\n * @implements KeySystem\n */\nimport CommonEncryption from '../CommonEncryption';\n\nconst uuid = '9a04f079-9840-4286-ab92-e65be0885f95';\nconst systemString = 'com.microsoft.playready';\nconst schemeIdURI = 'urn:uuid:' + uuid;\n\nfunction KeySystemPlayReady(config) {\n\n    let instance;\n    let messageFormat = 'utf16';\n    let BASE64 = config.BASE64;\n\n    function getRequestHeadersFromMessage(message) {\n        let msg,\n            xmlDoc;\n        let headers = {};\n        let parser = new DOMParser();\n        let dataview = (messageFormat === 'utf16') ? new Uint16Array(message) : new Uint8Array(message);\n\n        msg = String.fromCharCode.apply(null, dataview);\n        xmlDoc = parser.parseFromString(msg, 'application/xml');\n\n        let headerNameList = xmlDoc.getElementsByTagName('name');\n        let headerValueList = xmlDoc.getElementsByTagName('value');\n        for (let i = 0; i < headerNameList.length; i++) {\n            headers[headerNameList[i].childNodes[0].nodeValue] = headerValueList[i].childNodes[0].nodeValue;\n        }\n        // some versions of the PlayReady CDM return 'Content' instead of 'Content-Type'.\n        // this is NOT w3c conform and license servers may reject the request!\n        // -> rename it to proper w3c definition!\n        if (headers.hasOwnProperty('Content')) {\n            headers['Content-Type'] = headers.Content;\n            delete headers.Content;\n        }\n        return headers;\n    }\n\n    function getLicenseRequestFromMessage(message) {\n        let msg,\n            xmlDoc;\n        let licenseRequest = null;\n        let parser = new DOMParser();\n        let dataview = (messageFormat === 'utf16') ? new Uint16Array(message) : new Uint8Array(message);\n\n        msg = String.fromCharCode.apply(null, dataview);\n        xmlDoc = parser.parseFromString(msg, 'application/xml');\n\n        if (xmlDoc.getElementsByTagName('Challenge')[0]) {\n            let Challenge = xmlDoc.getElementsByTagName('Challenge')[0].childNodes[0].nodeValue;\n            if (Challenge) {\n                licenseRequest = BASE64.decode(Challenge);\n            }\n        }\n        return licenseRequest;\n    }\n\n    function getLicenseServerURLFromInitData(initData) {\n        if (initData) {\n            let data = new DataView(initData);\n            let numRecords = data.getUint16(4, true);\n            let offset = 6;\n            let parser = new DOMParser();\n\n            for (let i = 0; i < numRecords; i++) {\n                // Parse the PlayReady Record header\n                let recordType = data.getUint16(offset, true);\n                offset += 2;\n                let recordLength = data.getUint16(offset, true);\n                offset += 2;\n                if (recordType !== 0x0001) {\n                    offset += recordLength;\n                    continue;\n                }\n\n                let recordData = initData.slice(offset, offset + recordLength);\n                let record = String.fromCharCode.apply(null, new Uint16Array(recordData));\n                let xmlDoc = parser.parseFromString(record, 'application/xml');\n\n                // First try <LA_URL>\n                if (xmlDoc.getElementsByTagName('LA_URL')[0]) {\n                    let laurl = xmlDoc.getElementsByTagName('LA_URL')[0].childNodes[0].nodeValue;\n                    if (laurl) {\n                        return laurl;\n                    }\n                }\n\n                // Optionally, try <LUI_URL>\n                if (xmlDoc.getElementsByTagName('LUI_URL')[0]) {\n                    let luiurl = xmlDoc.getElementsByTagName('LUI_URL')[0].childNodes[0].nodeValue;\n                    if (luiurl) {\n                        return luiurl;\n                    }\n                }\n            }\n        }\n\n        return null;\n    }\n\n    function getInitData(cpData) {\n        // * desc@ getInitData\n        // *   generate PSSH data from PROHeader defined in MPD file\n        // *   PSSH format:\n        // *   size (4)\n        // *   box type(PSSH) (8)\n        // *   Protection SystemID (16)\n        // *   protection system data size (4) - length of decoded PROHeader\n        // *   decoded PROHeader data from MPD file\n        let PSSHBoxType = new Uint8Array([0x70, 0x73, 0x73, 0x68, 0x00, 0x00, 0x00, 0x00]); //'PSSH' 8 bytes\n        let playreadySystemID = new Uint8Array([0x9a, 0x04, 0xf0, 0x79, 0x98, 0x40, 0x42, 0x86, 0xab, 0x92, 0xe6, 0x5b, 0xe0, 0x88, 0x5f, 0x95]);\n\n        let byteCursor = 0;\n        let uint8arraydecodedPROHeader = null;\n\n        let PROSize,\n            PSSHSize,\n            PSSHBoxBuffer,\n            PSSHBox,\n            PSSHData;\n\n        // Handle common encryption PSSH\n        if ('pssh' in cpData) {\n            return CommonEncryption.parseInitDataFromContentProtection(cpData, BASE64);\n        }\n        // Handle native MS PlayReady ContentProtection elements\n        if ('pro' in cpData) {\n            uint8arraydecodedPROHeader = BASE64.decodeArray(cpData.pro.__text);\n        }\n        else if ('prheader' in cpData) {\n            uint8arraydecodedPROHeader = BASE64.decodeArray(cpData.prheader.__text);\n        }\n        else {\n            return null;\n        }\n\n        PROSize = uint8arraydecodedPROHeader.length;\n        PSSHSize = 0x4 + PSSHBoxType.length + playreadySystemID.length + 0x4 + PROSize;\n\n        PSSHBoxBuffer = new ArrayBuffer(PSSHSize);\n\n        PSSHBox = new Uint8Array(PSSHBoxBuffer);\n        PSSHData = new DataView(PSSHBoxBuffer);\n\n        PSSHData.setUint32(byteCursor, PSSHSize);\n        byteCursor += 0x4;\n\n        PSSHBox.set(PSSHBoxType, byteCursor);\n        byteCursor += PSSHBoxType.length;\n\n        PSSHBox.set(playreadySystemID, byteCursor);\n        byteCursor += playreadySystemID.length;\n\n        PSSHData.setUint32(byteCursor, PROSize);\n        byteCursor += 0x4;\n\n        PSSHBox.set(uint8arraydecodedPROHeader, byteCursor);\n        byteCursor += PROSize;\n\n        return PSSHBox.buffer;\n    }\n\n    /**\n     * It seems that some PlayReady implementations return their XML-based CDM\n     * messages using UTF16, while others return them as UTF8.  Use this function\n     * to modify the message format to expect when parsing CDM messages.\n     *\n     * @param {string} format the expected message format.  Either \"utf8\" or \"utf16\".\n     * @throws {Error} Specified message format is not one of \"utf8\" or \"utf16\"\n     */\n    function setPlayReadyMessageFormat(format) {\n        if (format !== 'utf8' && format !== 'utf16') {\n            throw new Error('Illegal PlayReady message format! -- ' + format);\n        }\n        messageFormat = format;\n    }\n\n    instance = {\n        uuid: uuid,\n        schemeIdURI: schemeIdURI,\n        systemString: systemString,\n        getInitData: getInitData,\n        getRequestHeadersFromMessage: getRequestHeadersFromMessage,\n        getLicenseRequestFromMessage: getLicenseRequestFromMessage,\n        getLicenseServerURLFromInitData: getLicenseServerURLFromInitData,\n        setPlayReadyMessageFormat: setPlayReadyMessageFormat\n    };\n\n    return instance;\n}\n\nKeySystemPlayReady.__dashjs_factory_name = 'KeySystemPlayReady';\nexport default dashjs.FactoryMaker.getSingletonFactory(KeySystemPlayReady); /* jshint ignore:line */","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * Google Widevine DRM\n *\n * @class\n * @implements MediaPlayer.dependencies.protection.KeySystem\n */\n\nimport CommonEncryption from '../CommonEncryption';\n\nconst uuid = 'edef8ba9-79d6-4ace-a3c8-27dcd51d21ed';\nconst systemString = 'com.widevine.alpha';\nconst schemeIdURI = 'urn:uuid:' + uuid;\n\nfunction KeySystemWidevine(config) {\n\n    let instance;\n    let protData = null;\n    let BASE64 = config.BASE64;\n\n    function init(protectionData) {\n        if (protectionData) {\n            protData = protectionData;\n        }\n    }\n\n    function replaceKID(pssh, KID) {\n        let pssh_array;\n        let replace = true;\n        let kidLen = 16;\n        let pos;\n        let i, j;\n\n        pssh_array = new Uint8Array(pssh);\n\n        for (i = 0; i <= pssh_array.length - (kidLen + 2); i++) {\n            if (pssh_array[i] === 0x12 && pssh_array[i + 1] === 0x10) {\n                pos = i + 2;\n                for (j = pos; j < (pos + kidLen); j++) {\n                    if (pssh_array[j] !== 0xFF) {\n                        replace = false;\n                        break;\n                    }\n                }\n                break;\n            }\n        }\n\n        if (replace) {\n            pssh_array.set(KID, pos);\n        }\n\n        return pssh_array.buffer;\n    }\n\n    function getInitData(cp) {\n        var pssh = null;\n        // Get pssh from protectionData or from manifest\n        if (protData && protData.pssh) {\n            pssh = BASE64.decodeArray(protData.pssh).buffer;\n        } else {\n            pssh = CommonEncryption.parseInitDataFromContentProtection(cp, BASE64);\n        }\n\n        // Check if KID within pssh is empty, in that case set KID value according to 'cenc:default_KID' value\n        if (pssh) {\n            pssh = replaceKID(pssh, cp['cenc:default_KID']);\n        }\n\n        return pssh;\n    }\n\n    function getRequestHeadersFromMessage( /*message*/ ) {\n        return null;\n    }\n\n    function getLicenseRequestFromMessage(message) {\n        return new Uint8Array(message);\n    }\n\n    function getLicenseServerURLFromInitData( /*initData*/ ) {\n        return null;\n    }\n\n    instance = {\n        uuid: uuid,\n        schemeIdURI: schemeIdURI,\n        systemString: systemString,\n        init: init,\n        getInitData: getInitData,\n        getRequestHeadersFromMessage: getRequestHeadersFromMessage,\n        getLicenseRequestFromMessage: getLicenseRequestFromMessage,\n        getLicenseServerURLFromInitData: getLicenseServerURLFromInitData\n    };\n\n    return instance;\n}\n\nKeySystemWidevine.__dashjs_factory_name = 'KeySystemWidevine';\nexport default dashjs.FactoryMaker.getSingletonFactory(KeySystemWidevine); /* jshint ignore:line */\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * Initial implementation of EME\n *\n * Implemented by Google Chrome prior to v36\n *\n * @implements ProtectionModel\n * @class\n */\nimport ProtectionKeyController from '../controllers/ProtectionKeyController';\nimport NeedKey from '../vo/NeedKey';\nimport KeyError from '../vo/KeyError';\nimport KeyMessage from '../vo/KeyMessage';\nimport KeySystemConfiguration from '../vo/KeySystemConfiguration';\nimport KeySystemAccess from '../vo/KeySystemAccess';\n\nfunction ProtectionModel_01b(config) {\n\n    let context = this.context;\n    let eventBus = config.eventBus;//Need to pass in here so we can use same instance since this is optional module\n    const events = config.events;\n    let log = config.log;\n    let api = config.api;\n    let errHandler = config.errHandler;\n\n    let instance,\n        videoElement,\n        keySystem,\n        protectionKeyController,\n\n        // With this version of the EME APIs, sessionIDs are not assigned to\n        // sessions until the first key message is received.  We are assuming\n        // that in the case of multiple sessions, key messages will be received\n        // in the order that generateKeyRequest() is called.\n        // Holding spot for newly-created sessions until we determine whether or\n        // not the CDM supports sessionIDs\n        pendingSessions,\n\n        // List of sessions that have been initialized.  Only the first position will\n        // be used in the case that the CDM does not support sessionIDs\n        sessions,\n\n        // Not all CDMs support the notion of sessionIDs.  Without sessionIDs\n        // there is no way for us to differentiate between sessions, therefore\n        // we must only allow a single session.  Once we receive the first key\n        // message we can set this flag to determine if more sessions are allowed\n        moreSessionsAllowed,\n\n        // This is our main event handler for all desired HTMLMediaElement events\n        // related to EME.  These events are translated into our API-independent\n        // versions of the same events\n        eventHandler;\n\n    function setup() {\n        videoElement = null;\n        keySystem = null;\n        pendingSessions = [];\n        sessions = [];\n        protectionKeyController = ProtectionKeyController(context).getInstance();\n        eventHandler = createEventHandler();\n    }\n\n    function reset() {\n        if (videoElement) {\n            removeEventListeners();\n        }\n        for (let i = 0; i < sessions.length; i++) {\n            closeKeySession(sessions[i]);\n        }\n        eventBus.trigger(events.TEARDOWN_COMPLETE);\n    }\n\n    function getKeySystem() {\n        return keySystem;\n    }\n\n    function getAllInitData() {\n        let retVal = [];\n        for (let i = 0; i < pendingSessions.length; i++) {\n            retVal.push(pendingSessions[i].initData);\n        }\n        for (let i = 0; i < sessions.length; i++) {\n            retVal.push(sessions[i].initData);\n        }\n        return retVal;\n    }\n\n    function requestKeySystemAccess(ksConfigurations) {\n        let ve = videoElement;\n        if (!ve) { // Must have a video element to do this capability tests\n            ve = document.createElement('video');\n        }\n\n        // Try key systems in order, first one with supported key system configuration\n        // is used\n        let found = false;\n        for (let ksIdx = 0; ksIdx < ksConfigurations.length; ksIdx++) {\n            let systemString = ksConfigurations[ksIdx].ks.systemString;\n            let configs = ksConfigurations[ksIdx].configs;\n            let supportedAudio = null;\n            let supportedVideo = null;\n\n            // Try key system configs in order, first one with supported audio/video\n            // is used\n            for (let configIdx = 0; configIdx < configs.length; configIdx++) {\n                //let audios = configs[configIdx].audioCapabilities;\n                let videos = configs[configIdx].videoCapabilities;\n                // Look for supported video container/codecs\n                if (videos && videos.length !== 0) {\n                    supportedVideo = []; // Indicates that we have a requested video config\n                    for (let videoIdx = 0; videoIdx < videos.length; videoIdx++) {\n                        if (ve.canPlayType(videos[videoIdx].contentType, systemString) !== '') {\n                            supportedVideo.push(videos[videoIdx]);\n                        }\n                    }\n                }\n\n                // No supported audio or video in this configuration OR we have\n                // requested audio or video configuration that is not supported\n                if ((!supportedAudio && !supportedVideo) ||\n                    (supportedAudio && supportedAudio.length === 0) ||\n                    (supportedVideo && supportedVideo.length === 0)) {\n                    continue;\n                }\n\n                // This configuration is supported\n                found = true;\n                let ksConfig = new KeySystemConfiguration(supportedAudio, supportedVideo);\n                let ks = protectionKeyController.getKeySystemBySystemString(systemString);\n                eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE, { data: new KeySystemAccess(ks, ksConfig) });\n                break;\n            }\n        }\n        if (!found) {\n            eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE, {error: 'Key system access denied! -- No valid audio/video content configurations detected!'});\n        }\n    }\n\n    function selectKeySystem(keySystemAccess) {\n        keySystem = keySystemAccess.keySystem;\n        eventBus.trigger(events.INTERNAL_KEY_SYSTEM_SELECTED);\n    }\n\n    function setMediaElement(mediaElement) {\n        if (videoElement === mediaElement) {\n            return;\n        }\n\n        // Replacing the previous element\n        if (videoElement) {\n            removeEventListeners();\n        }\n\n        videoElement = mediaElement;\n\n        // Only if we are not detaching from the existing element\n        if (videoElement) {\n            videoElement.addEventListener(api.keyerror, eventHandler);\n            videoElement.addEventListener(api.needkey, eventHandler);\n            videoElement.addEventListener(api.keymessage, eventHandler);\n            videoElement.addEventListener(api.keyadded, eventHandler);\n            eventBus.trigger(events.VIDEO_ELEMENT_SELECTED);\n        }\n    }\n\n    function createKeySession(initData /*, keySystemType */) {\n\n        if (!keySystem) {\n            throw new Error('Can not create sessions until you have selected a key system');\n        }\n\n        // Determine if creating a new session is allowed\n        if (moreSessionsAllowed || sessions.length === 0) {\n\n            let newSession = { // Implements SessionToken\n                sessionID: null,\n                initData: initData,\n                getSessionID: function () {\n                    return this.sessionID;\n                },\n\n                getExpirationTime: function () {\n                    return NaN;\n                },\n\n                getSessionType: function () {\n                    return 'temporary';\n                }\n            };\n            pendingSessions.push(newSession);\n\n            // Send our request to the CDM\n            videoElement[api.generateKeyRequest](keySystem.systemString, new Uint8Array(initData));\n\n            return newSession;\n\n        } else {\n            throw new Error('Multiple sessions not allowed!');\n        }\n\n    }\n\n    function updateKeySession(sessionToken, message) {\n        const sessionID = sessionToken.sessionID;\n        if (!protectionKeyController.isClearKey(keySystem)) {\n            // Send our request to the CDM\n            videoElement[api.addKey](keySystem.systemString,\n                new Uint8Array(message), new Uint8Array(sessionToken.initData), sessionID);\n        } else {\n            // For clearkey, message is a ClearKeyKeySet\n            for (let i = 0; i < message.keyPairs.length; i++) {\n                videoElement[api.addKey](keySystem.systemString,\n                    message.keyPairs[i].key, message.keyPairs[i].keyID, sessionID);\n            }\n        }\n    }\n\n    function closeKeySession(sessionToken) {\n        // Send our request to the CDM\n        videoElement[api.cancelKeyRequest](keySystem.systemString, sessionToken.sessionID);\n    }\n\n    function setServerCertificate(/*serverCertificate*/) { /* Not supported */ }\n    function loadKeySession(/*sessionID*/) { /* Not supported */ }\n    function removeKeySession(/*sessionToken*/) { /* Not supported */ }\n\n    function createEventHandler() {\n        return {\n            handleEvent: function (event) {\n                let sessionToken = null;\n                switch (event.type) {\n\n                    case api.needkey:\n                        let initData = ArrayBuffer.isView(event.initData) ? event.initData.buffer : event.initData;\n                        eventBus.trigger(events.NEED_KEY, {key: new NeedKey(initData, 'cenc')});\n                        break;\n\n                    case api.keyerror:\n                        sessionToken = findSessionByID(sessions, event.sessionId);\n                        if (!sessionToken) {\n                            sessionToken = findSessionByID(pendingSessions, event.sessionId);\n                        }\n\n                        if (sessionToken) {\n                            let msg = '';\n                            switch (event.errorCode.code) {\n                                case 1:\n                                    msg += 'MEDIA_KEYERR_UNKNOWN - An unspecified error occurred. This value is used for errors that don\\'t match any of the other codes.';\n                                    break;\n                                case 2:\n                                    msg += 'MEDIA_KEYERR_CLIENT - The Key System could not be installed or updated.';\n                                    break;\n                                case 3:\n                                    msg += 'MEDIA_KEYERR_SERVICE - The message passed into update indicated an error from the license service.';\n                                    break;\n                                case 4:\n                                    msg += 'MEDIA_KEYERR_OUTPUT - There is no available output device with the required characteristics for the content protection system.';\n                                    break;\n                                case 5:\n                                    msg += 'MEDIA_KEYERR_HARDWARECHANGE - A hardware configuration change caused a content protection error.';\n                                    break;\n                                case 6:\n                                    msg += 'MEDIA_KEYERR_DOMAIN - An error occurred in a multi-device domain licensing configuration. The most common error is a failure to join the domain.';\n                                    break;\n                            }\n                            msg += '  System Code = ' + event.systemCode;\n                            // TODO: Build error string based on key error\n                            eventBus.trigger(events.KEY_ERROR, {data: new KeyError(sessionToken, msg)});\n                        } else {\n                            log('No session token found for key error');\n                        }\n                        break;\n\n                    case api.keyadded:\n                        sessionToken = findSessionByID(sessions, event.sessionId);\n                        if (!sessionToken) {\n                            sessionToken = findSessionByID(pendingSessions, event.sessionId);\n                        }\n\n                        if (sessionToken) {\n                            log('DRM: Key added.');\n                            eventBus.trigger(events.KEY_ADDED, {data: sessionToken});//TODO not sure anything is using sessionToken? why there?\n                        } else {\n                            log('No session token found for key added');\n                        }\n                        break;\n\n                    case api.keymessage:\n\n                        // If this CDM does not support session IDs, we will be limited\n                        // to a single session\n                        moreSessionsAllowed = (event.sessionId !== null) && (event.sessionId !== undefined);\n\n                        // SessionIDs supported\n                        if (moreSessionsAllowed) {\n\n                            // Attempt to find an uninitialized token with this sessionID\n                            sessionToken = findSessionByID(sessions, event.sessionId);\n                            if (!sessionToken && pendingSessions.length > 0) {\n\n                                // This is the first message for our latest session, so set the\n                                // sessionID and add it to our list\n                                sessionToken = pendingSessions.shift();\n                                sessions.push(sessionToken);\n                                sessionToken.sessionID = event.sessionId;\n                            }\n                        } else if (pendingSessions.length > 0) { // SessionIDs not supported\n\n                            sessionToken = pendingSessions.shift();\n                            sessions.push(sessionToken);\n\n                            if (pendingSessions.length !== 0) {\n                                errHandler.mediaKeyMessageError('Multiple key sessions were creates with a user-agent that does not support sessionIDs!! Unpredictable behavior ahead!');\n                            }\n                        }\n\n                        if (sessionToken) {\n                            let message = ArrayBuffer.isView(event.message) ? event.message.buffer : event.message;\n\n                            // For ClearKey, the spec mandates that you pass this message to the\n                            // addKey method, so we always save it to the token since there is no\n                            // way to tell which key system is in use\n                            sessionToken.keyMessage = message;\n                            eventBus.trigger(events.INTERNAL_KEY_MESSAGE, {data: new KeyMessage(sessionToken, message, event.defaultURL)});\n\n                        } else {\n                            log('No session token found for key message');\n                        }\n                        break;\n                }\n            }\n        };\n    }\n\n\n    /**\n     * Helper function to retrieve the stored session token based on a given\n     * sessionID value\n     *\n     * @param {Array} sessionArray - the array of sessions to search\n     * @param {*} sessionID - the sessionID to search for\n     * @returns {*} the session token with the given sessionID\n     */\n    function findSessionByID(sessionArray, sessionID) {\n\n        if (!sessionID || !sessionArray) {\n            return null;\n        } else {\n            const len = sessionArray.length;\n            for (let i = 0; i < len; i++) {\n                if (sessionArray[i].sessionID == sessionID) {\n                    return sessionArray[i];\n                }\n            }\n            return null;\n        }\n    }\n\n    function removeEventListeners() {\n        videoElement.removeEventListener(api.keyerror, eventHandler);\n        videoElement.removeEventListener(api.needkey, eventHandler);\n        videoElement.removeEventListener(api.keymessage, eventHandler);\n        videoElement.removeEventListener(api.keyadded, eventHandler);\n    }\n\n    instance = {\n        getAllInitData: getAllInitData,\n        requestKeySystemAccess: requestKeySystemAccess,\n        getKeySystem: getKeySystem,\n        selectKeySystem: selectKeySystem,\n        setMediaElement: setMediaElement,\n        createKeySession: createKeySession,\n        updateKeySession: updateKeySession,\n        closeKeySession: closeKeySession,\n        setServerCertificate: setServerCertificate,\n        loadKeySession: loadKeySession,\n        removeKeySession: removeKeySession,\n        reset: reset\n    };\n\n    setup();\n\n    return instance;\n}\n\nProtectionModel_01b.__dashjs_factory_name = 'ProtectionModel_01b';\nexport default dashjs.FactoryMaker.getClassFactory(ProtectionModel_01b); /* jshint ignore:line */\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * Most recent EME implementation\n *\n * Implemented by Google Chrome v36+ (Windows, OSX, Linux)\n *\n * @implements ProtectionModel\n * @class\n */\nimport ProtectionKeyController from '../controllers/ProtectionKeyController';\nimport NeedKey from '../vo/NeedKey';\nimport KeyError from '../vo/KeyError';\nimport KeyMessage from '../vo/KeyMessage';\nimport KeySystemAccess from '../vo/KeySystemAccess';\n\nfunction ProtectionModel_21Jan2015(config) {\n\n    let context = this.context;\n    let eventBus = config.eventBus;//Need to pass in here so we can use same instance since this is optional module\n    const events = config.events;\n    let log = config.log;\n\n    let instance,\n        keySystem,\n        videoElement,\n        mediaKeys,\n        sessions,\n        eventHandler,\n        protectionKeyController;\n\n    function setup() {\n        keySystem = null;\n        videoElement = null;\n        mediaKeys = null;\n        sessions = [];\n        protectionKeyController = ProtectionKeyController(context).getInstance();\n        eventHandler = createEventHandler();\n    }\n\n    function reset() {\n        const numSessions = sessions.length;\n        let session;\n\n        if (numSessions !== 0) {\n            // Called when we are done closing a session.  Success or fail\n            const done = function (session) {\n                removeSession(session);\n                if (sessions.length === 0) {\n                    if (videoElement) {\n                        videoElement.removeEventListener('encrypted', eventHandler);\n                        videoElement.setMediaKeys(null).then(function () {\n                            eventBus.trigger(events.TEARDOWN_COMPLETE);\n                        });\n                    } else {\n                        eventBus.trigger(events.TEARDOWN_COMPLETE);\n                    }\n                }\n            };\n            for (let i = 0; i < numSessions; i++) {\n                session = sessions[i];\n                (function (s) {\n                    // Override closed promise resolver\n                    session.session.closed.then(function () {\n                        done(s);\n                    });\n                    // Close the session and handle errors, otherwise promise\n                    // resolver above will be called\n                    closeKeySessionInternal(session).catch(function () {\n                        done(s);\n                    });\n\n                })(session);\n            }\n        } else {\n            eventBus.trigger(events.TEARDOWN_COMPLETE);\n        }\n    }\n\n    function getKeySystem() {\n        return keySystem;\n    }\n\n    function getAllInitData() {\n        let retVal = [];\n        for (let i = 0; i < sessions.length; i++) {\n            retVal.push(sessions[i].initData);\n        }\n        return retVal;\n    }\n\n    function requestKeySystemAccess(ksConfigurations) {\n        requestKeySystemAccessInternal(ksConfigurations, 0);\n    }\n\n    function selectKeySystem(keySystemAccess) {\n        keySystemAccess.mksa.createMediaKeys().then(function (mkeys) {\n            keySystem = keySystemAccess.keySystem;\n            mediaKeys = mkeys;\n            if (videoElement) {\n                videoElement.setMediaKeys(mediaKeys).then(function () {\n                    eventBus.trigger(events.INTERNAL_KEY_SYSTEM_SELECTED);\n                });\n            }\n\n        }).catch(function () {\n            eventBus.trigger(events.INTERNAL_KEY_SYSTEM_SELECTED, {error: 'Error selecting keys system (' + keySystemAccess.keySystem.systemString + ')! Could not create MediaKeys -- TODO'});\n        });\n    }\n\n    function setMediaElement(mediaElement) {\n        if (videoElement === mediaElement)\n            return;\n\n        // Replacing the previous element\n        if (videoElement) {\n            videoElement.removeEventListener('encrypted', eventHandler);\n            videoElement.setMediaKeys(null);\n        }\n\n        videoElement = mediaElement;\n\n        // Only if we are not detaching from the existing element\n        if (videoElement) {\n            videoElement.addEventListener('encrypted', eventHandler);\n            if (mediaKeys) {\n                videoElement.setMediaKeys(mediaKeys);\n            }\n        }\n    }\n\n    function setServerCertificate(serverCertificate) {\n        if (!keySystem || !mediaKeys) {\n            throw new Error('Can not set server certificate until you have selected a key system');\n        }\n        mediaKeys.setServerCertificate(serverCertificate).then(function () {\n            log('DRM: License server certificate successfully updated.');\n            eventBus.trigger(events.SERVER_CERTIFICATE_UPDATED);\n        }).catch(function (error) {\n            eventBus.trigger(events.SERVER_CERTIFICATE_UPDATED, {error: 'Error updating server certificate -- ' + error.name});\n        });\n    }\n\n    function createKeySession(initData, sessionType) {\n\n        if (!keySystem || !mediaKeys) {\n            throw new Error('Can not create sessions until you have selected a key system');\n        }\n\n        let session = mediaKeys.createSession(sessionType);\n        let sessionToken = createSessionToken(session, initData, sessionType);\n\n        // Generate initial key request\n        session.generateRequest('cenc', initData).then(function () {\n            log('DRM: Session created.  SessionID = ' + sessionToken.getSessionID());\n            eventBus.trigger(events.KEY_SESSION_CREATED, {data: sessionToken});\n        }).catch(function (error) {\n            // TODO: Better error string\n            removeSession(sessionToken);\n            eventBus.trigger(events.KEY_SESSION_CREATED, {data: null, error: 'Error generating key request -- ' + error.name});\n        });\n    }\n\n    function updateKeySession(sessionToken, message) {\n\n        let session = sessionToken.session;\n\n        // Send our request to the key session\n        if (protectionKeyController.isClearKey(keySystem)) {\n            message = message.toJWK();\n        }\n        session.update(message).catch(function (error) {\n            eventBus.trigger(events.KEY_ERROR, {data: new KeyError(sessionToken, 'Error sending update() message! ' + error.name)});\n        });\n    }\n\n    function loadKeySession(sessionID) {\n        if (!keySystem || !mediaKeys) {\n            throw new Error('Can not load sessions until you have selected a key system');\n        }\n\n        let session = mediaKeys.createSession();\n\n        // Load persisted session data into our newly created session object\n        session.load(sessionID).then(function (success) {\n            if (success) {\n                let sessionToken = createSessionToken(session);\n                log('DRM: Session created.  SessionID = ' + sessionToken.getSessionID());\n                eventBus.trigger(events.KEY_SESSION_CREATED, {data: sessionToken});\n            } else {\n                eventBus.trigger(events.KEY_SESSION_CREATED, {data: null, error: 'Could not load session! Invalid Session ID (' + sessionID + ')'});\n            }\n        }).catch(function (error) {\n            eventBus.trigger(events.KEY_SESSION_CREATED, {data: null, error: 'Could not load session (' + sessionID + ')! ' + error.name});\n        });\n    }\n\n    function removeKeySession(sessionToken) {\n        let session = sessionToken.session;\n\n        session.remove().then(function () {\n            log('DRM: Session removed.  SessionID = ' + sessionToken.getSessionID());\n            eventBus.trigger(events.KEY_SESSION_REMOVED, {data: sessionToken.getSessionID()});\n        }, function (error) {\n            eventBus.trigger(events.KEY_SESSION_REMOVED, {data: null, error: 'Error removing session (' + sessionToken.getSessionID() + '). ' + error.name});\n\n        });\n    }\n\n    function closeKeySession(sessionToken) {\n        // Send our request to the key session\n        closeKeySessionInternal(sessionToken).catch(function (error) {\n            removeSession(sessionToken);\n            eventBus.trigger(events.KEY_SESSION_CLOSED, {data: null, error: 'Error closing session (' + sessionToken.getSessionID() + ') ' + error.name});\n        });\n    }\n\n    function requestKeySystemAccessInternal(ksConfigurations, idx) {\n        (function (i) {\n            let keySystem = ksConfigurations[i].ks;\n            let configs = ksConfigurations[i].configs;\n            navigator.requestMediaKeySystemAccess(keySystem.systemString, configs).then(function (mediaKeySystemAccess) {\n\n                // Chrome 40 does not currently implement MediaKeySystemAccess.getConfiguration()\n                let configuration = (typeof mediaKeySystemAccess.getConfiguration === 'function') ?\n                        mediaKeySystemAccess.getConfiguration() : null;\n                let keySystemAccess = new KeySystemAccess(keySystem, configuration);\n                keySystemAccess.mksa = mediaKeySystemAccess;\n                eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE, {data: keySystemAccess});\n\n            }).catch(function () {\n                if (++i < ksConfigurations.length) {\n                    requestKeySystemAccessInternal(ksConfigurations, i);\n                } else {\n                    eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE, {error: 'Key system access denied!'});\n                }\n            });\n        })(idx);\n    }\n\n    function closeKeySessionInternal(sessionToken) {\n        let session = sessionToken.session;\n\n        // Remove event listeners\n        session.removeEventListener('keystatuseschange', sessionToken);\n        session.removeEventListener('message', sessionToken);\n\n        // Send our request to the key session\n        return session.close();\n    }\n\n    // This is our main event handler for all desired HTMLMediaElement events\n    // related to EME.  These events are translated into our API-independent\n    // versions of the same events\n    function createEventHandler() {\n        return {\n            handleEvent: function (event) {\n                switch (event.type) {\n\n                    case 'encrypted':\n                        if (event.initData) {\n                            let initData = ArrayBuffer.isView(event.initData) ? event.initData.buffer : event.initData;\n                            eventBus.trigger(events.NEED_KEY, {key: new NeedKey(initData, event.initDataType)});\n                        }\n                        break;\n                }\n            }\n        };\n    }\n\n    function removeSession(token) {\n        // Remove from our session list\n        for (let i = 0; i < sessions.length; i++) {\n            if (sessions[i] === token) {\n                sessions.splice(i,1);\n                break;\n            }\n        }\n    }\n\n    // Function to create our session token objects which manage the EME\n    // MediaKeySession and session-specific event handler\n    function createSessionToken(session, initData, sessionType) {\n\n        let token = { // Implements SessionToken\n            session: session,\n            initData: initData,\n\n            // This is our main event handler for all desired MediaKeySession events\n            // These events are translated into our API-independent versions of the\n            // same events\n            handleEvent: function (event) {\n                switch (event.type) {\n                    case 'keystatuseschange':\n                        eventBus.trigger(events.KEY_STATUSES_CHANGED, {data: this});\n                        break;\n\n                    case 'message':\n                        let message = ArrayBuffer.isView(event.message) ? event.message.buffer : event.message;\n                        eventBus.trigger(events.INTERNAL_KEY_MESSAGE, {data: new KeyMessage(this, message, undefined, event.messageType)});\n                        break;\n                }\n            },\n\n            getSessionID: function () {\n                return session.sessionId;\n            },\n\n            getExpirationTime: function () {\n                return session.expiration;\n            },\n\n            getKeyStatuses: function () {\n                return session.keyStatuses;\n            },\n\n            getSessionType: function () {\n                return sessionType;\n            }\n        };\n\n        // Add all event listeners\n        session.addEventListener('keystatuseschange', token);\n        session.addEventListener('message', token);\n\n        // Register callback for session closed Promise\n        session.closed.then(function () {\n            removeSession(token);\n            log('DRM: Session closed.  SessionID = ' + token.getSessionID());\n            eventBus.trigger(events.KEY_SESSION_CLOSED, {data: token.getSessionID()});\n        });\n\n        // Add to our session list\n        sessions.push(token);\n\n        return token;\n    }\n\n    instance = {\n        getAllInitData: getAllInitData,\n        requestKeySystemAccess: requestKeySystemAccess,\n        getKeySystem: getKeySystem,\n        selectKeySystem: selectKeySystem,\n        setMediaElement: setMediaElement,\n        setServerCertificate: setServerCertificate,\n        createKeySession: createKeySession,\n        updateKeySession: updateKeySession,\n        loadKeySession: loadKeySession,\n        removeKeySession: removeKeySession,\n        closeKeySession: closeKeySession,\n        reset: reset\n    };\n\n    setup();\n\n    return instance;\n}\n\nProtectionModel_21Jan2015.__dashjs_factory_name = 'ProtectionModel_21Jan2015';\nexport default dashjs.FactoryMaker.getClassFactory(ProtectionModel_21Jan2015); /* jshint ignore:line */","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * Implementation of the EME APIs as of the 3 Feb 2014 state of the specification.\n *\n * Implemented by Internet Explorer 11 (Windows 8.1)\n *\n * @implements ProtectionModel\n * @class\n */\n\nimport ProtectionKeyController from '../controllers/ProtectionKeyController';\nimport NeedKey from '../vo/NeedKey';\nimport KeyError from '../vo/KeyError';\nimport KeyMessage from '../vo/KeyMessage';\nimport KeySystemConfiguration from '../vo/KeySystemConfiguration';\nimport KeySystemAccess from '../vo/KeySystemAccess';\n\nfunction ProtectionModel_3Feb2014(config) {\n\n    let context = this.context;\n    let eventBus = config.eventBus;//Need to pass in here so we can use same instance since this is optional module\n    const events = config.events;\n    let log = config.log;\n    let api = config.api;\n\n\n    let instance,\n        videoElement,\n        keySystem,\n        mediaKeys,\n        keySystemAccess,\n        sessions,\n        eventHandler,\n        protectionKeyController;\n\n    function setup() {\n        videoElement = null;\n        keySystem = null;\n        mediaKeys = null;\n        keySystemAccess = null;\n        sessions = [];\n        protectionKeyController = ProtectionKeyController(context).getInstance();\n        eventHandler = createEventHandler();\n    }\n\n    function reset() {\n        try {\n            for (let i = 0; i < sessions.length; i++) {\n                closeKeySession(sessions[i]);\n            }\n            if (videoElement) {\n                videoElement.removeEventListener(api.needkey, eventHandler);\n            }\n            eventBus.trigger(events.TEARDOWN_COMPLETE);\n        } catch (error) {\n            eventBus.trigger(events.TEARDOWN_COMPLETE, {error: 'Error tearing down key sessions and MediaKeys! -- ' + error.message});\n        }\n    }\n\n    function getKeySystem() {\n        return keySystem;\n    }\n\n    function getAllInitData() {\n        let retVal = [];\n        for (let i = 0; i < sessions.length; i++) {\n            retVal.push(sessions[i].initData);\n        }\n        return retVal;\n    }\n\n    function requestKeySystemAccess(ksConfigurations) {\n\n        // Try key systems in order, first one with supported key system configuration\n        // is used\n        let found = false;\n        for (let ksIdx = 0; ksIdx < ksConfigurations.length; ksIdx++) {\n            let systemString = ksConfigurations[ksIdx].ks.systemString;\n            let configs = ksConfigurations[ksIdx].configs;\n            let supportedAudio = null;\n            let supportedVideo = null;\n\n            // Try key system configs in order, first one with supported audio/video\n            // is used\n            for (let configIdx = 0; configIdx < configs.length; configIdx++) {\n                let audios = configs[configIdx].audioCapabilities;\n                let videos = configs[configIdx].videoCapabilities;\n\n                // Look for supported audio container/codecs\n                if (audios && audios.length !== 0) {\n                    supportedAudio = []; // Indicates that we have a requested audio config\n                    for (let audioIdx = 0; audioIdx < audios.length; audioIdx++) {\n                        if (window[api.MediaKeys].isTypeSupported(systemString, audios[audioIdx].contentType)) {\n                            supportedAudio.push(audios[audioIdx]);\n                        }\n                    }\n                }\n\n                // Look for supported video container/codecs\n                if (videos && videos.length !== 0) {\n                    supportedVideo = []; // Indicates that we have a requested video config\n                    for (let videoIdx = 0; videoIdx < videos.length; videoIdx++) {\n                        if (window[api.MediaKeys].isTypeSupported(systemString, videos[videoIdx].contentType)) {\n                            supportedVideo.push(videos[videoIdx]);\n                        }\n                    }\n                }\n\n                // No supported audio or video in this configuration OR we have\n                // requested audio or video configuration that is not supported\n                if ((!supportedAudio && !supportedVideo) ||\n                    (supportedAudio && supportedAudio.length === 0) ||\n                    (supportedVideo && supportedVideo.length === 0)) {\n                    continue;\n                }\n\n                // This configuration is supported\n                found = true;\n                let ksConfig = new KeySystemConfiguration(supportedAudio, supportedVideo);\n                let ks = protectionKeyController.getKeySystemBySystemString(systemString);\n                eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE, {data: new KeySystemAccess(ks, ksConfig)});\n                break;\n            }\n        }\n        if (!found) {\n            eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE, {error: 'Key system access denied! -- No valid audio/video content configurations detected!'});\n        }\n    }\n\n    function selectKeySystem(ksAccess) {\n        try {\n            mediaKeys = ksAccess.mediaKeys = new window[api.MediaKeys](ksAccess.keySystem.systemString);\n            keySystem = ksAccess.keySystem;\n            keySystemAccess = ksAccess;\n            if (videoElement) {\n                setMediaKeys();\n            }\n            eventBus.trigger(events.INTERNAL_KEY_SYSTEM_SELECTED);\n        } catch (error) {\n            eventBus.trigger(events.INTERNAL_KEY_SYSTEM_SELECTED, {error: 'Error selecting keys system (' + keySystem.systemString + ')! Could not create MediaKeys -- TODO'});\n        }\n    }\n\n    function setMediaElement(mediaElement) {\n        if (videoElement === mediaElement)\n            return;\n\n        // Replacing the previous element\n        if (videoElement) {\n            videoElement.removeEventListener(api.needkey, eventHandler);\n        }\n\n        videoElement = mediaElement;\n\n        // Only if we are not detaching from the existing element\n        if (videoElement) {\n            videoElement.addEventListener(api.needkey, eventHandler);\n            if (mediaKeys) {\n                setMediaKeys();\n            }\n        }\n    }\n\n    function createKeySession(initData /*, keySystemType */) {\n\n        if (!keySystem || !mediaKeys || !keySystemAccess) {\n            throw new Error('Can not create sessions until you have selected a key system');\n        }\n\n        // Use the first video capability for the contentType.\n        // TODO:  Not sure if there is a way to concatenate all capability data into a RFC6386-compatible format\n\n        // If player is trying to playback Audio only stream - don't error out.\n        let capabilities = null;\n\n        if (keySystemAccess.ksConfiguration.videoCapabilities !== null && keySystemAccess.ksConfiguration.videoCapabilities.length > 0)\n          capabilities = keySystemAccess.ksConfiguration.videoCapabilities[0];\n\n        if (capabilities === null && keySystemAccess.ksConfiguration.audioCapabilities !== null && keySystemAccess.ksConfiguration.audioCapabilities.length > 0)\n          capabilities = keySystemAccess.ksConfiguration.audioCapabilities[0];\n\n        if (capabilities === null)\n          throw new Error('Can not create sessions for unknown content types.');\n\n        let contentType = capabilities.contentType;\n        let session = mediaKeys.createSession(contentType, new Uint8Array(initData));\n        let sessionToken = createSessionToken(session, initData);\n\n        // Add all event listeners\n        session.addEventListener(api.error, sessionToken);\n        session.addEventListener(api.message, sessionToken);\n        session.addEventListener(api.ready, sessionToken);\n        session.addEventListener(api.close, sessionToken);\n\n        // Add to our session list\n        sessions.push(sessionToken);\n        log('DRM: Session created.  SessionID = ' + sessionToken.getSessionID());\n        eventBus.trigger(events.KEY_SESSION_CREATED, {data: sessionToken});\n    }\n\n    function updateKeySession(sessionToken, message) {\n\n        let session = sessionToken.session;\n\n        if (!protectionKeyController.isClearKey(keySystem)) {\n            // Send our request to the key session\n            session.update(new Uint8Array(message));\n        } else {\n            // For clearkey, message is a ClearKeyKeySet\n            session.update(new Uint8Array(message.toJWK()));\n        }\n    }\n\n    /**\n     * Close the given session and release all associated keys.  Following\n     * this call, the sessionToken becomes invalid\n     *\n     * @param {Object} sessionToken - the session token\n     */\n    function closeKeySession(sessionToken) {\n\n        let session = sessionToken.session;\n\n        // Remove event listeners\n        session.removeEventListener(api.error, sessionToken);\n        session.removeEventListener(api.message, sessionToken);\n        session.removeEventListener(api.ready, sessionToken);\n        session.removeEventListener(api.close, sessionToken);\n\n        // Remove from our session list\n        for (let i = 0; i < sessions.length; i++) {\n            if (sessions[i] === sessionToken) {\n                sessions.splice(i,1);\n                break;\n            }\n        }\n\n        // Send our request to the key session\n        session[api.release]();\n    }\n\n    function setServerCertificate(/*serverCertificate*/) { /* Not supported */ }\n    function loadKeySession(/*sessionID*/) { /* Not supported */ }\n    function removeKeySession(/*sessionToken*/) { /* Not supported */ }\n\n\n    function createEventHandler() {\n        return {\n            handleEvent: function (event) {\n                switch (event.type) {\n\n                    case api.needkey:\n                        if (event.initData) {\n                            let initData = ArrayBuffer.isView(event.initData) ? event.initData.buffer : event.initData;\n                            eventBus.trigger(events.NEED_KEY, {key: new NeedKey(initData, 'cenc')});\n                        }\n                        break;\n                }\n            }\n        };\n    }\n\n\n    // IE11 does not let you set MediaKeys until it has entered a certain\n    // readyState, so we need this logic to ensure we don't set the keys\n    // too early\n    function setMediaKeys() {\n        let boundDoSetKeys = null;\n        const doSetKeys = function () {\n            videoElement.removeEventListener('loadedmetadata', boundDoSetKeys);\n            videoElement[api.setMediaKeys](mediaKeys);\n            eventBus.trigger(events.VIDEO_ELEMENT_SELECTED);\n        };\n        if (videoElement.readyState >= 1) {\n            doSetKeys();\n        } else {\n            boundDoSetKeys = doSetKeys.bind(this);\n            videoElement.addEventListener('loadedmetadata', boundDoSetKeys);\n        }\n\n    }\n\n    // Function to create our session token objects which manage the EME\n    // MediaKeySession and session-specific event handler\n    function createSessionToken(keySession, initData) {\n        return {\n            // Implements SessionToken\n            session: keySession,\n            initData: initData,\n\n            getSessionID: function () {\n                return this.session.sessionId;\n            },\n\n            getExpirationTime: function () {\n                return NaN;\n            },\n\n            getSessionType: function () {\n                return 'temporary';\n            },\n            // This is our main event handler for all desired MediaKeySession events\n            // These events are translated into our API-independent versions of the\n            // same events\n            handleEvent: function (event) {\n                switch (event.type) {\n\n                    case api.error:\n                        let errorStr = 'KeyError'; // TODO: Make better string from event\n                        eventBus.trigger(events.KEY_ERROR, { data: new KeyError(this, errorStr) });\n                        break;\n                    case api.message:\n                        let message = ArrayBuffer.isView(event.message) ? event.message.buffer : event.message;\n                        eventBus.trigger(events.INTERNAL_KEY_MESSAGE, { data: new KeyMessage(this, message, event.destinationURL) });\n                        break;\n                    case api.ready:\n                        log('DRM: Key added.');\n                        eventBus.trigger(events.KEY_ADDED);\n                        break;\n\n                    case api.close:\n                        log('DRM: Session closed.  SessionID = ' + this.getSessionID());\n                        eventBus.trigger(events.KEY_SESSION_CLOSED, { data: this.getSessionID() });\n                        break;\n                }\n            }\n        };\n    }\n\n    instance = {\n        getAllInitData: getAllInitData,\n        requestKeySystemAccess: requestKeySystemAccess,\n        getKeySystem: getKeySystem,\n        selectKeySystem: selectKeySystem,\n        setMediaElement: setMediaElement,\n        createKeySession: createKeySession,\n        updateKeySession: updateKeySession,\n        closeKeySession: closeKeySession,\n        setServerCertificate: setServerCertificate,\n        loadKeySession: loadKeySession,\n        removeKeySession: removeKeySession,\n        reset: reset\n    };\n\n    setup();\n\n    return instance;\n}\n\nProtectionModel_3Feb2014.__dashjs_factory_name = 'ProtectionModel_3Feb2014';\nexport default dashjs.FactoryMaker.getClassFactory(ProtectionModel_3Feb2014); /* jshint ignore:line */\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * CableLabs ClearKey license server implementation\n *\n * For testing purposes and evaluating potential uses for ClearKey, we have developed\n * a dirt-simple API for requesting ClearKey licenses from a remote server.\n *\n * @implements LicenseServer\n * @class\n */\nimport KeyPair from '../vo/KeyPair';\nimport ClearKeyKeySet from '../vo/ClearKeyKeySet';\n\nfunction ClearKey() {\n\n    let instance;\n\n    function getServerURLFromMessage(url/*, messageType*/) {\n        return url;\n    }\n\n    function getHTTPMethod(/*messageType*/) {\n        return 'POST';\n    }\n\n    function getResponseType(/*keySystemStr*/) {\n        return 'json';\n    }\n\n    function getLicenseMessage(serverResponse/*, keySystemStr, messageType*/) {\n        if (!serverResponse.hasOwnProperty('keys')) {\n            return null;\n        }\n        let keyPairs = [];\n        for (let i = 0; i < serverResponse.keys.length; i++) {\n            let keypair = serverResponse.keys[i];\n            let keyid = keypair.kid.replace(/=/g, '');\n            let key = keypair.k.replace(/=/g, '');\n\n            keyPairs.push(new KeyPair(keyid, key));\n        }\n        return new ClearKeyKeySet(keyPairs);\n    }\n\n    function getErrorResponse(serverResponse/*, keySystemStr, messageType*/) {\n        return String.fromCharCode.apply(null, new Uint8Array(serverResponse));\n    }\n\n    instance = {\n        getServerURLFromMessage: getServerURLFromMessage,\n        getHTTPMethod: getHTTPMethod,\n        getResponseType: getResponseType,\n        getLicenseMessage: getLicenseMessage,\n        getErrorResponse: getErrorResponse\n    };\n\n    return instance;\n}\n\nClearKey.__dashjs_factory_name = 'ClearKey';\nexport default dashjs.FactoryMaker.getSingletonFactory(ClearKey); /* jshint ignore:line */\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * CastLabs DRMToday License Server implementation\n *\n * @implements LicenseServer\n * @class\n */\n\nfunction DRMToday(config) {\n\n    let BASE64 = config.BASE64;\n\n    const keySystems = {\n        'com.widevine.alpha': {\n            responseType: 'json',\n            getLicenseMessage: function (response) {\n                return BASE64.decodeArray(response.license);\n            },\n            getErrorResponse: function (response) {\n                return response;\n            }\n        },\n        'com.microsoft.playready': {\n            responseType: 'arraybuffer',\n            getLicenseMessage: function (response) {\n                return response;\n            },\n            getErrorResponse: function (response) {\n                return String.fromCharCode.apply(null, new Uint8Array(response));\n            }\n        }\n    };\n\n    let instance;\n\n    function checkConfig() {\n        if (!BASE64 || !BASE64.hasOwnProperty('decodeArray')) {\n            throw new Error('Missing config parameter(s)');\n        }\n    }\n\n    function getServerURLFromMessage(url /*, message, messageType*/) {\n        return url;\n    }\n\n    function getHTTPMethod(/*messageType*/) {\n        return 'POST';\n    }\n\n    function getResponseType(keySystemStr/*, messageType*/) {\n        return keySystems[keySystemStr].responseType;\n    }\n\n    function getLicenseMessage(serverResponse, keySystemStr/*, messageType*/) {\n        checkConfig();\n        return keySystems[keySystemStr].getLicenseMessage(serverResponse);\n    }\n\n    function getErrorResponse(serverResponse, keySystemStr/*, messageType*/) {\n        return keySystems[keySystemStr].getErrorResponse(serverResponse);\n    }\n\n    instance = {\n        getServerURLFromMessage: getServerURLFromMessage,\n        getHTTPMethod: getHTTPMethod,\n        getResponseType: getResponseType,\n        getLicenseMessage: getLicenseMessage,\n        getErrorResponse: getErrorResponse\n    };\n\n    return instance;\n}\n\nDRMToday.__dashjs_factory_name = 'DRMToday';\nexport default dashjs.FactoryMaker.getSingletonFactory(DRMToday); /* jshint ignore:line */","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/* global escape: true */\n\n/**\n * Microsoft PlayReady Test License Server\n *\n * For testing content that uses the PlayReady test server at\n *\n * @implements LicenseServer\n * @class\n */\n\nfunction PlayReady() {\n\n    let instance;\n\n    const soap = 'http://schemas.xmlsoap.org/soap/envelope/';\n\n    function uintToString(arrayBuffer) {\n        const encodedString = String.fromCharCode.apply(null, new Uint8Array(arrayBuffer));\n        const decodedString = decodeURIComponent(escape(encodedString));\n        return decodedString;\n    }\n\n    function parseServerResponse(serverResponse) {\n        if (window.DOMParser) {\n            const stringResponse = uintToString(serverResponse);\n            const parser = new window.DOMParser();\n            const xmlDoc = parser.parseFromString(stringResponse, 'text/xml');\n            const envelope = xmlDoc ? xmlDoc.getElementsByTagNameNS(soap, 'Envelope')[0] : null;\n            const body = envelope ? envelope.getElementsByTagNameNS(soap, 'Body')[0] : null;\n            const fault = body ? body.getElementsByTagNameNS(soap, 'Fault')[0] : null;\n\n            if (fault) {\n                return null;\n            }\n        }\n        return serverResponse;\n    }\n\n    function parseErrorResponse(serverResponse) {\n        let faultstring = '';\n        let statusCode = '';\n        let message = '';\n        let idStart = -1;\n        let idEnd = -1;\n\n        if (window.DOMParser) {\n            const stringResponse = uintToString(serverResponse);\n            const parser = new window.DOMParser();\n            const xmlDoc = parser.parseFromString(stringResponse, 'text/xml');\n            const envelope = xmlDoc ? xmlDoc.getElementsByTagNameNS(soap, 'Envelope')[0] : null;\n            const body = envelope ? envelope.getElementsByTagNameNS(soap, 'Body')[0] : null;\n            const fault = body ? body.getElementsByTagNameNS(soap, 'Fault')[0] : null;\n            const detail = fault ? fault.getElementsByTagName('detail')[0] : null;\n            const exception = detail ? detail.getElementsByTagName('Exception')[0] : null;\n            let node = null;\n\n            if (fault === null) {\n                return stringResponse;\n            }\n\n            node = fault.getElementsByTagName('faultstring')[0].firstChild;\n            faultstring = node ? node.nodeValue : null;\n\n            if (exception !== null) {\n                node = exception.getElementsByTagName('StatusCode')[0];\n                statusCode = node ? node.firstChild.nodeValue : null;\n                node = exception.getElementsByTagName('Message')[0];\n                message = node ? node.firstChild.nodeValue : null;\n                idStart = message ? message.lastIndexOf('[') + 1 : -1;\n                idEnd = message ? message.indexOf(']') : -1;\n                message = message ? message.substring(idStart, idEnd) : '';\n            }\n        }\n\n        let errorString = `code: ${statusCode}, name: ${faultstring}`;\n        if (message) {\n            errorString += `, message: ${message}`;\n        }\n\n        return errorString;\n    }\n\n    function getServerURLFromMessage(url /*, message, messageType*/) {\n        return url;\n    }\n\n    function getHTTPMethod(/*messageType*/) {\n        return 'POST';\n    }\n\n    function getResponseType(/*keySystemStr, messageType*/) {\n        return 'arraybuffer';\n    }\n\n    function getLicenseMessage(serverResponse/*, keySystemStr, messageType*/) {\n        return parseServerResponse.call(this, serverResponse);\n    }\n\n    function getErrorResponse(serverResponse/*, keySystemStr, messageType*/) {\n        return parseErrorResponse.call(this, serverResponse);\n    }\n\n    instance = {\n        getServerURLFromMessage: getServerURLFromMessage,\n        getHTTPMethod: getHTTPMethod,\n        getResponseType: getResponseType,\n        getLicenseMessage: getLicenseMessage,\n        getErrorResponse: getErrorResponse\n    };\n\n    return instance;\n}\n\nPlayReady.__dashjs_factory_name = 'PlayReady';\nexport default dashjs.FactoryMaker.getSingletonFactory(PlayReady); /* jshint ignore:line */","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nfunction Widevine() {\n\n    let instance;\n\n    function getServerURLFromMessage(url /*, message, messageType*/) {\n        return url;\n    }\n\n    function getHTTPMethod(/*messageType*/) {\n        return 'POST';\n    }\n\n    function getResponseType(/*keySystemStr, messageType*/) {\n        return 'arraybuffer';\n    }\n\n    function getLicenseMessage(serverResponse/*, keySystemStr, messageType*/) {\n        return serverResponse;\n    }\n\n    function getErrorResponse(serverResponse/*, keySystemStr, messageType*/) {\n        return String.fromCharCode.apply(null, new Uint8Array(serverResponse));\n    }\n\n    instance = {\n        getServerURLFromMessage: getServerURLFromMessage,\n        getHTTPMethod: getHTTPMethod,\n        getResponseType: getResponseType,\n        getLicenseMessage: getLicenseMessage,\n        getErrorResponse: getErrorResponse\n    };\n\n    return instance;\n}\n\nWidevine.__dashjs_factory_name = 'Widevine';\nexport default dashjs.FactoryMaker.getSingletonFactory(Widevine); /* jshint ignore:line */","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * @classdesc A collection of ClearKey encryption keys with an (optional) associated\n *  type\n * @ignore\n */\nclass ClearKeyKeySet {\n    /**\n     * @param {Array.<KeyPair>} keyPairs\n     * @param {string} type the type of keys in this set.  One of either 'persistent'\n     * or 'temporary'.  Can also be null or undefined.\n     * @class\n     * @ignore\n     */\n    constructor(keyPairs, type) {\n        if (type && type !== 'persistent' && type !== 'temporary')\n            throw new Error('Invalid ClearKey key set type!  Must be one of \\'persistent\\' or \\'temporary\\'');\n        this.keyPairs = keyPairs;\n        this.type = type;\n    }\n\n    /**\n     * Convert this key set to its JSON Web Key (JWK) representation\n     *\n     * @return {ArrayBuffer} JWK object UTF-8 encoded as ArrayBuffer\n     */\n    toJWK() {\n        let i;\n        let numKeys = this.keyPairs.length;\n        let jwk = {keys: []};\n\n        for (i = 0; i < numKeys; i++) {\n            let key = {\n                kty: 'oct',\n                alg: 'A128KW',\n                kid: this.keyPairs[i].keyID,\n                k: this.keyPairs[i].key\n            };\n            jwk.keys.push(key);\n        }\n        if (this.type) {\n            jwk.type = this.type;\n        }\n        let jwkString = JSON.stringify(jwk);\n        const len = jwkString.length;\n\n        // Convert JSON string to ArrayBuffer\n        let buf = new ArrayBuffer(len);\n        let bView = new Uint8Array(buf);\n        for (i = 0; i < len; i++)\n            bView[i] = jwkString.charCodeAt(i);\n        return buf;\n    }\n}\n\nexport default ClearKeyKeySet;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * @classdesc EME-independent KeyError\n * @ignore\n */\nclass KeyError {\n    /**\n     * @param {Object} sessionToken the key session to which this error is associated\n     * @param {string} errorString an informational error message\n     * @class\n     * @deprecated Newest versions of EME APIs will not use this error object\n     */\n    constructor(sessionToken, errorString) {\n        this.sessionToken = sessionToken;\n        this.error = errorString;\n    }\n}\n\nexport default KeyError;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @classdesc EME-independent KeyMessage\n * @ignore\n */\nclass KeyMessage {\n    /**\n     * @param {SessionToken} sessionToken the session\n     * to which the key message is associated\n     * @param {ArrayBuffer} message the key message\n     * @param {string} defaultURL license acquisition URL provided by the CDM\n     * @param {string} messageType Supported message types can be found\n     * {@link https://w3c.github.io/encrypted-media/#idl-def-MediaKeyMessageType|here}.\n     * @class\n     */\n    constructor(sessionToken, message, defaultURL, messageType) {\n        this.sessionToken = sessionToken;\n        this.message = message;\n        this.defaultURL = defaultURL;\n        this.messageType = messageType ? messageType : 'license-request';\n    }\n}\n\nexport default KeyMessage;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @classdesc Represents a 128-bit keyID and 128-bit encryption key\n * @ignore\n */\nclass KeyPair {\n    /**\n     * @param {string} keyID 128-bit key ID, base64 encoded, with no padding\n     * @param {string} key 128-bit encryption key, base64 encoded, with no padding\n     * @class\n     * @ignore\n     */\n    constructor(keyID, key) {\n        this.keyID = keyID;\n        this.key = key;\n    }\n}\n\nexport default KeyPair;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @classdesc Creates a new key system access token.  Represents a valid key system for\n * given piece of content and key system requirements.  Used to initialize license\n * acquisition operations.\n * @ignore\n */\nclass KeySystemAccess {\n    /**\n     * @param {MediaPlayer.dependencies.protection.KeySystem} keySystem the key system\n     * @param {KeySystemConfiguration} ksConfiguration the\n     * subset of configurations passed to the key system access request that are supported\n     * by this user agent\n     * @class\n     * @ignore\n     */\n    constructor(keySystem, ksConfiguration) {\n        this.keySystem = keySystem;\n        this.ksConfiguration = ksConfiguration;\n    }\n}\n\nexport default KeySystemAccess;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * @classdesc Represents a set of configurations that describe the capabilities desired for\n *  support by a given CDM\n * @ignore\n */\nclass KeySystemConfiguration {\n    /**\n     * @param {Array.<MediaCapability>} audioCapabilities array of\n     * desired audio capabilities.  Higher preference capabilities should be placed earlier\n     * in the array.\n     * @param {Array.<MediaCapability>} videoCapabilities array of\n     * desired video capabilities.  Higher preference capabilities should be placed earlier\n     * in the array.\n     * @param {string} distinctiveIdentifier desired use of distinctive identifiers.\n     * One of \"required\", \"optional\", or \"not-allowed\"\n     * @param {string} persistentState desired support for persistent storage of\n     * key systems.  One of \"required\", \"optional\", or \"not-allowed\"\n     * @param {Array.<string>} sessionTypes List of session types that must\n     * be supported by the key system\n     * @class\n     */\n    constructor(audioCapabilities, videoCapabilities, distinctiveIdentifier, persistentState, sessionTypes) {\n        this.initDataTypes = [ 'cenc' ];\n        if (audioCapabilities && audioCapabilities.length) {\n            this.audioCapabilities = audioCapabilities;\n        }\n        if (videoCapabilities && videoCapabilities.length) {\n            this.videoCapabilities = videoCapabilities;\n        }\n        this.distinctiveIdentifier = distinctiveIdentifier;\n        this.persistentState = persistentState;\n        this.sessionTypes = sessionTypes;\n    }\n}\n\nexport default KeySystemConfiguration;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @classdesc A media capability\n * @ignore\n */\nclass MediaCapability {\n    /**\n     * @param {string} contentType MIME type and codecs (RFC6386)\n     * @param {string} robustness\n     * @class\n     * @ignore\n     */\n    constructor(contentType, robustness) {\n        this.contentType = contentType;\n        this.robustness = robustness;\n    }\n}\n\nexport default MediaCapability;\n","/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @classdesc NeedKey\n * @ignore\n */\nclass NeedKey {\n    /**\n     * @param {ArrayBuffer} initData the initialization data\n     * @param {string} initDataType initialization data type\n     * @class\n     */\n    constructor(initData, initDataType) {\n        this.initData = initData;\n        this.initDataType = initDataType;\n    }\n}\n\nexport default NeedKey;\n"]}